[{"/Users/jyotirmoysundi/git/openeval-ui/app/api/auth/[...nextauth]/route.ts":"1","/Users/jyotirmoysundi/git/openeval-ui/app/auth.ts":"2","/Users/jyotirmoysundi/git/openeval-ui/app/authprovider.tsx":"3","/Users/jyotirmoysundi/git/openeval-ui/app/cicd/page.tsx":"4","/Users/jyotirmoysundi/git/openeval-ui/app/create-organization/[[...create-organization]]/page.tsx":"5","/Users/jyotirmoysundi/git/openeval-ui/app/dismiss-button.tsx":"6","/Users/jyotirmoysundi/git/openeval-ui/app/evaluation/page.tsx":"7","/Users/jyotirmoysundi/git/openeval-ui/app/layout.tsx":"8","/Users/jyotirmoysundi/git/openeval-ui/app/llmhub/page.tsx":"9","/Users/jyotirmoysundi/git/openeval-ui/app/loading.tsx":"10","/Users/jyotirmoysundi/git/openeval-ui/app/nav.tsx":"11","/Users/jyotirmoysundi/git/openeval-ui/app/navbar.tsx":"12","/Users/jyotirmoysundi/git/openeval-ui/app/organization-profile/[[...organization-profile]]/page.tsx":"13","/Users/jyotirmoysundi/git/openeval-ui/app/organization-switcher/[[...organization-switcher]]/page.tsx":"14","/Users/jyotirmoysundi/git/openeval-ui/app/page.tsx":"15","/Users/jyotirmoysundi/git/openeval-ui/app/search.tsx":"16","/Users/jyotirmoysundi/git/openeval-ui/app/settings/page.tsx":"17","/Users/jyotirmoysundi/git/openeval-ui/app/sign-in/page.tsx":"18","/Users/jyotirmoysundi/git/openeval-ui/app/sign-up/[[...sign-up]]/page.tsx":"19","/Users/jyotirmoysundi/git/openeval-ui/app/simulate/page.tsx":"20","/Users/jyotirmoysundi/git/openeval-ui/app/table.tsx":"21","/Users/jyotirmoysundi/git/openeval-ui/app/toast.tsx":"22","/Users/jyotirmoysundi/git/openeval-ui/pages/_app.tsx":"23","/Users/jyotirmoysundi/git/openeval-ui/pages/add/dataset.tsx":"24","/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/[id].js":"25","/Users/jyotirmoysundi/git/openeval-ui/components/DatasetList.tsx":"26","/Users/jyotirmoysundi/git/openeval-ui/components/dataset-form.tsx":"27","/Users/jyotirmoysundi/git/openeval-ui/pages/add/endpoint.tsx":"28","/Users/jyotirmoysundi/git/openeval-ui/pages/add/evaluation.tsx":"29","/Users/jyotirmoysundi/git/openeval-ui/pages/add/simulator.tsx":"30","/Users/jyotirmoysundi/git/openeval-ui/pages/api/user.js":"31","/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/Details.js":"32","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/Details.js":"33","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/[id].js":"34","/Users/jyotirmoysundi/git/openeval-ui/components/EndpointList.tsx":"35","/Users/jyotirmoysundi/git/openeval-ui/components/EvaluationList.tsx":"36","/Users/jyotirmoysundi/git/openeval-ui/components/endpoint-form.tsx":"37","/Users/jyotirmoysundi/git/openeval-ui/components/simulator-form.tsx":"38","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/Details.js":"39","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/[id].js":"40","/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/Details.js":"41","/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/[id].js":"42","/Users/jyotirmoysundi/git/openeval-ui/components/SimulationList.tsx":"43"},{"size":74,"mtime":1703433337525,"results":"44","hashOfConfig":"45"},{"size":976,"mtime":1703229579179,"results":"46","hashOfConfig":"45"},{"size":229,"mtime":1703229228337,"results":"47","hashOfConfig":"45"},{"size":1944,"mtime":1703258455231,"results":"48","hashOfConfig":"45"},{"size":696,"mtime":1703886473510,"results":"49","hashOfConfig":"45"},{"size":399,"mtime":1703259203047,"results":"50","hashOfConfig":"45"},{"size":2001,"mtime":1703703503210,"results":"51","hashOfConfig":"45"},{"size":943,"mtime":1703573244273,"results":"52","hashOfConfig":"45"},{"size":2813,"mtime":1703564758297,"results":"53","hashOfConfig":"45"},{"size":196,"mtime":1703229529278,"results":"54","hashOfConfig":"45"},{"size":128,"mtime":1703229458388,"results":"55","hashOfConfig":"45"},{"size":9770,"mtime":1703886592613,"results":"56","hashOfConfig":"45"},{"size":307,"mtime":1703281221581,"results":"57","hashOfConfig":"45"},{"size":470,"mtime":1703281218876,"results":"58","hashOfConfig":"45"},{"size":2889,"mtime":1703573403423,"results":"59","hashOfConfig":"45"},{"size":681,"mtime":1703231045636,"results":"60","hashOfConfig":"45"},{"size":4771,"mtime":1703258542844,"results":"61","hashOfConfig":"45"},{"size":448,"mtime":1703573298241,"results":"62","hashOfConfig":"45"},{"size":191,"mtime":1703281211342,"results":"63","hashOfConfig":"45"},{"size":2821,"mtime":1703708119489,"results":"64","hashOfConfig":"45"},{"size":913,"mtime":1699122423066,"results":"65","hashOfConfig":"45"},{"size":171,"mtime":1699122423066,"results":"66","hashOfConfig":"45"},{"size":274,"mtime":1703229992367,"results":"67","hashOfConfig":"45"},{"size":648,"mtime":1703886661874,"results":"68","hashOfConfig":"45"},{"size":908,"mtime":1703563943358,"results":"69","hashOfConfig":"45"},{"size":10621,"mtime":1703941570366,"results":"70","hashOfConfig":"45"},{"size":22500,"mtime":1703905447477,"results":"71","hashOfConfig":"45"},{"size":651,"mtime":1703562742846,"results":"72","hashOfConfig":"45"},{"size":654,"mtime":1703562762739,"results":"73","hashOfConfig":"45"},{"size":656,"mtime":1703573472117,"results":"74","hashOfConfig":"45"},{"size":810,"mtime":1703577342151,"results":"75","hashOfConfig":"45"},{"size":14523,"mtime":1703910386734,"results":"76","hashOfConfig":"45"},{"size":7707,"mtime":1703712339627,"results":"77","hashOfConfig":"45"},{"size":913,"mtime":1703564294568,"results":"78","hashOfConfig":"45"},{"size":7273,"mtime":1703967064668,"results":"79","hashOfConfig":"45"},{"size":7962,"mtime":1703716367264,"results":"80","hashOfConfig":"45"},{"size":15981,"mtime":1703669779148,"results":"81","hashOfConfig":"45"},{"size":9735,"mtime":1703676193659,"results":"82","hashOfConfig":"45"},{"size":17950,"mtime":1703803293912,"results":"83","hashOfConfig":"45"},{"size":911,"mtime":1703714527321,"results":"84","hashOfConfig":"45"},{"size":8637,"mtime":1703790281099,"results":"85","hashOfConfig":"45"},{"size":911,"mtime":1703719834137,"results":"86","hashOfConfig":"45"},{"size":8725,"mtime":1703967083555,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v9rnx3",{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jyotirmoysundi/git/openeval-ui/app/api/auth/[...nextauth]/route.ts",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/auth.ts",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/authprovider.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/cicd/page.tsx",["227"],[],"'use client'\n\nimport { sql } from '@vercel/postgres';\nimport { Card, Title, Text, Button, Grid } from '@tremor/react';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/solid';\nimport { use, useEffect, useState } from 'react';\nimport '../globals.css';\n\nexport default async function IndexPage({\n  searchParams\n}: {\n  searchParams: { q: string };\n}) {\n  \n  const { session } = useClerk();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if there is an active session\n  if (!session) {\n    // Handle the case where there is no active session\n    return null;\n  }\n\n  const handleSearch = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setSearchTerm(event.currentTarget.value);\n    }\n  };\n\n  return (\n    <div>\n      {session ? (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n          \n          <div className=\"flex justify-between items-center\">\n            {' '}\n            \n            <Link href=\"/add/dataset\">\n              <Button className=\"bg-gray-900 text-white hover:bg-gray-700 border-white hover:border-white pl-4\">\n                <span className=\"relative inline-flex items-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"1.5\"\n                    stroke=\"currentColor\"\n                    className=\"w-4 h-4\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      d=\"M12 4.5v15m7.5-7.5h-15\"\n                    />\n                  </svg>\n                  &nbsp; Setup CICD\n                </span>\n              </Button>\n            </Link>\n          </div>\n        </main>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}","/Users/jyotirmoysundi/git/openeval-ui/app/create-organization/[[...create-organization]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/dismiss-button.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/evaluation/page.tsx",["228"],[],"'use client'\n\nimport { sql } from '@vercel/postgres';\nimport { Card, Title, Text, Button, Grid } from '@tremor/react';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/solid';\nimport { use, useEffect, useState } from 'react';\nimport '../globals.css';\nimport EvaluationList from '@/components/EvaluationList';\n\nexport default async function IndexPage({\n  searchParams\n}: {\n  searchParams: { q: string };\n}) {\n  \n  const { session } = useClerk();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if there is an active session\n  if (!session) {\n    // Handle the case where there is no active session\n    return null;\n  }\n\n  const handleSearch = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setSearchTerm(event.currentTarget.value);\n    }\n  };\n\n  return (\n    <div>\n      {session ? (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n          \n          <div className=\"flex justify-between items-center\">\n            {' '}\n            <div className=\"relative flex items-center w-full\">\n              {' '}\n              <input\n                disabled={!session}\n                type=\"text\"\n                placeholder=\"Search evaluations... press enter to submit\"\n                className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                onKeyDown={handleSearch}\n              />\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n              </div>\n            </div>\n            \n          </div>\n          <EvaluationList searchTerm={searchTerm} />\n        </main>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}","/Users/jyotirmoysundi/git/openeval-ui/app/layout.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/llmhub/page.tsx",["229"],[],"'use client'\n\nimport { sql } from '@vercel/postgres';\nimport { Card, Title, Text, Button, Grid } from '@tremor/react';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/solid';\nimport { use, useEffect, useState } from 'react';\nimport '../globals.css';\nimport EndpointList from '@/components/EndpointList';\n\nexport default async function IndexPage({\n  searchParams\n}: {\n  searchParams: { q: string };\n}) {\n  \n  const { session } = useClerk();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if there is an active session\n  if (!session) {\n    // Handle the case where there is no active session\n    return null;\n  }\n\n  const handleSearch = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setSearchTerm(event.currentTarget.value);\n    }\n  };\n\n  return (\n    <div>\n      {session ? (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n          \n          <div className=\"flex justify-between items-center\">\n            {' '}\n            <div className=\"relative flex items-center w-full\">\n              {' '}\n              <input\n                disabled={!session}\n                type=\"text\"\n                placeholder=\"Search app endpoint... press enter to submit\"\n                className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                onKeyDown={handleSearch}\n              />\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n              </div>\n            </div>\n            <Link href=\"/add/endpoint\">\n              <Button className=\"bg-gray-900 text-white hover:bg-gray-700 border-white hover:border-white pl-4\">\n                <span className=\"relative inline-flex items-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"1.5\"\n                    stroke=\"currentColor\"\n                    className=\"w-4 h-4\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      d=\"M12 4.5v15m7.5-7.5h-15\"\n                    />\n                  </svg>\n                  &nbsp; New Endpoint\n                </span>\n              </Button>\n            </Link>\n          </div>\n          <EndpointList searchTerm={searchTerm} />\n        </main>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}","/Users/jyotirmoysundi/git/openeval-ui/app/loading.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/nav.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/navbar.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/organization-profile/[[...organization-profile]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/organization-switcher/[[...organization-switcher]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/page.tsx",["230"],[],"'use client'\n\nimport { sql } from '@vercel/postgres';\nimport { Card, Title, Text, Button, Grid } from '@tremor/react';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/solid';\nimport { use, useEffect, useState } from 'react';\nimport '../app/globals.css';\nimport DatasetList from '../components/DatasetList';\n\nexport default async function IndexPage({\n  searchParams\n}: {\n  searchParams: { q: string };\n}) {\n  \n  const { session } = useClerk();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if there is an active session\n  if (!session) {\n    // Handle the case where there is no active session\n    return null;\n  }\n\n  const handleSearch = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setSearchTerm(event.currentTarget.value);\n    }\n  };\n\n\n  return (\n    <div>\n      {session ? (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n          \n          <div className=\"flex justify-between items-center\">\n            {' '}\n            <div className=\"relative flex items-center w-full\">\n              {' '}\n              <input\n                disabled={!session}\n                type=\"text\"\n                placeholder=\"Search dataset... press enter to submit\"\n                className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                onKeyDown={handleSearch}\n              />\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n              </div>\n            </div>\n            <Link href=\"/add/dataset\">\n              <Button \n                className=\"bg-gray-900 text-white hover:bg-gray-700 border-white hover:border-white pl-4\"\n                disabled={!session}\n                >\n                <span className=\"relative inline-flex items-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"1.5\"\n                    stroke=\"currentColor\"\n                    className=\"w-4 h-4\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      d=\"M12 4.5v15m7.5-7.5h-15\"\n                    />\n                  </svg>\n                  &nbsp; New Dataset\n                </span>\n              </Button>\n            </Link>\n          </div>\n          <DatasetList searchTerm={searchTerm} />\n        </main>\n      ) : (\n        <>Loading...</>\n      )}\n    </div>\n  );\n}","/Users/jyotirmoysundi/git/openeval-ui/app/search.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/settings/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/sign-in/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/sign-up/[[...sign-up]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/simulate/page.tsx",["231"],[],"'use client'\n\nimport { sql } from '@vercel/postgres';\nimport { Card, Title, Text, Button, Grid } from '@tremor/react';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/solid';\nimport { use, useEffect, useState } from 'react';\nimport '../globals.css';\nimport SimulationList from '@/components/SimulationList';\n\nexport default async function IndexPage({\n  searchParams\n}: {\n  searchParams: { q: string };\n}) {\n  \n  const { session } = useClerk();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if there is an active session\n  if (!session) {\n    // Handle the case where there is no active session\n    return null;\n  }\n\n  const handleSearch = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setSearchTerm(event.currentTarget.value);\n    }\n  };\n\n  return (\n    <div>\n      {session ? (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n          \n          <div className=\"flex justify-between items-center\">\n            {' '}\n            <div className=\"relative flex items-center w-full\">\n              {' '}\n              <input\n                disabled={!session}\n                type=\"text\"\n                placeholder=\"Search simulations... press enter to submit\"\n                className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                onKeyDown={handleSearch}\n              />\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n              </div>\n            </div>\n            <Link href=\"/add/simulator\">\n              <Button className=\"bg-gray-900 text-white hover:bg-gray-700 border-white hover:border-white pl-4\">\n                <span className=\"relative inline-flex items-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"1.5\"\n                    stroke=\"currentColor\"\n                    className=\"w-4 h-4\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      d=\"M12 4.5v15m7.5-7.5h-15\"\n                    />\n                  </svg>\n                  &nbsp; New Simulation\n                </span>\n              </Button>\n            </Link>\n          </div>\n          <SimulationList searchTerm={searchTerm} />\n        </main>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}","/Users/jyotirmoysundi/git/openeval-ui/app/table.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/toast.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/_app.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/dataset.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/components/DatasetList.tsx",["232"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // You need to install axios if not already installed\nimport '../app/globals.css';\nimport Link from 'next/link';\nimport { faChevronRight, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { useAuth } from '@clerk/nextjs';\nimport { useClerk } from '@clerk/nextjs';\n\nfunction DatasetList({ searchTerm }: { searchTerm: string }) {\n    const { isLoaded, userId, sessionId, getToken } = useAuth();\n    const tableHeaderCellStyle =\n        'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider whitespace-no-wrap';\n    const tableBodyCellStyle =\n        'text-sm px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const [datasets, setDatasets] = useState([]);\n    const [selectedInterview, setSelectedInterview] = useState<any>(null);\n    const [userMessage, setUserMessage] =\n        useState(`No dataset found. Why not create a new dataset? Click the button\n  above to get started!`); // Message to display to the user\n    const [isLoading, setIsLoading] = useState(true);\n    const [successMessage, setSuccessMessage] = useState(0); // Message to display to the user\n    const { session } = useClerk();\n    const [orgId, setOrgId] = useState<string>('');\n\n    useEffect(() => {\n        const fetchUserData = async () => {\n            try {\n                setIsLoading(true);\n\n\n                setOrgId(session?.lastActiveOrganizationId ?? '');\n                setSuccessMessage(1);\n                if (session?.lastActiveOrganizationId) {\n                    setUserMessage(\n                        `No dataset found. Why not create a new dataset? Click the button\n            above to get started!`\n                    );\n                } else {\n                    setSuccessMessage(0);\n                    setUserMessage(\n                        'No organization found. Please create an organization first.'\n                    );\n                }\n            } catch (error) {\n                console.error('Error fetching user data:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        if (session) {\n            fetchUserData();\n        }\n    }, [session]);\n\n    useEffect(() => {\n        // Fetch interviews using Prisma\n        const fetchData = async () => {\n            try {\n                setIsLoading(true);\n                if (searchTerm.trim() !== '') {\n                    const searchResponse = await axios.get(\n                        `${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/dataset/search`, {\n                        params: {\n                            org_id: session?.lastActiveOrganizationId,\n                            search: searchTerm,\n                        },\n                    });\n                    const searchResults = searchResponse.data;\n                    setDatasets(searchResults);\n                } else {\n                    // If search term is empty, use the default API route\n                    const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/dataset/list`, {\n                        params: {\n                            org_id: session?.lastActiveOrganizationId,\n                        },\n                    });\n                    const fetchedInterviews = response.data;\n                    setDatasets(fetchedInterviews);\n                }\n                setIsLoading(false); // Data has been fetched\n                setSuccessMessage(1);\n            } catch (error: any) {\n                setSuccessMessage(0);\n                console.error('Error fetching:', error);\n                setIsLoading(false); // Data fetching failed\n            }\n        };\n        if (session && session?.lastActiveOrganizationId) {\n            fetchData();\n        }\n    }, [searchTerm]);\n\n    if (!session) {\n        return null;\n    }\n\n\n    const handleRowClick = (interview: any) => {\n        setSelectedInterview((prevSelectedInterview: any) => {\n            if (prevSelectedInterview && prevSelectedInterview.id === interview.id) {\n                return null; // Hide details if the same row is clicked again\n            } else {\n                return interview; // Show details for the clicked row\n            }\n        });\n    };\n\n    if (isLoading || !isLoaded || !userId || !session) {\n        // Render loading message\n        return (\n            <div\n                className=\"container min-w-full text-sm\"\n                style={{ marginTop: '16px' }}\n            >\n                Loading...\n            </div>\n        );\n    }\n    return (\n        <div className=\"container min-w-full\" style={{ marginTop: '16px' }}>\n            {datasets.length === 0 ? (\n                <div className=\"text-sm\">\n                    <p>\n                        {successMessage === 1 ? (\n                            <>{userMessage}</>\n                        ) : (\n                            <div>\n                                {userMessage}\n                                <Link href={'/create-organization'} className=\"text-blue-500\">\n                                    {' '}\n                                    Click here to get started\n                                </Link>\n                            </div>\n                        )}\n                    </p>\n                </div>\n            ) : (\n                <table className=\"container min-w-full border-collapse border table-auto\" style={{ marginTop: '16px' }}>\n                    <thead>\n                        <tr>\n                            <th className={tableHeaderCellStyle}>Timestamp</th>\n                            <th className={tableHeaderCellStyle}>Name</th>\n                            {/* <th className={tableHeaderCellStyle}>NumberOfQA</th>\n                            <th className={tableHeaderCellStyle}>Sample%</th> */}\n                            <th className={tableHeaderCellStyle}>DataType</th>\n                            <th className={tableHeaderCellStyle}>ChatType</th>\n                            <th className={tableHeaderCellStyle}>ModelUsed</th>\n                            <th className={tableHeaderCellStyle}>ChunkSize</th>\n                            <th className={tableHeaderCellStyle}>Status</th>\n                            <th className={tableHeaderCellStyle}>View</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"bg-white\">\n                        {datasets.map((dataset: any) => (\n                            <React.Fragment key={dataset.id}>\n                                <tr key={dataset.id} onClick={() => handleRowClick(dataset)}>\n                                    <td className={tableBodyCellStyle}>\n                                        {new Date(dataset.ts).toLocaleString()}\n                                    </td>\n                                    <td className={tableBodyCellStyle}>{dataset.name}</td>\n                                    {/* <td className={tableBodyCellStyle}>{dataset.number_of_questions}</td>\n                                    <td className={tableBodyCellStyle}>{dataset.sample_size}</td> */}\n                                    <td className={tableBodyCellStyle}>{dataset.dataset_type}</td>\n                                    <td className={tableBodyCellStyle}>\n                                        {dataset.qa_type ?? ''}\n                                    </td>\n                                    <td className={tableBodyCellStyle}>{dataset.model_name}</td>\n                                    <td className={tableBodyCellStyle}>{dataset.chunk_size ?? 2000}</td>\n                                    <td className={tableBodyCellStyle}>{dataset.status ?? \"\"}</td>\n                                    <td className={tableBodyCellStyle}>\n                                        <Link href={`/view/datasets/${dataset.id}`} rel=\"noopener noreferrer\">\n                                            <FontAwesomeIcon\n                                                icon={faChevronRight}\n                                                className=\"text-sm text-gray-900 hover:text-blue-500\"\n                                            />\n                                        </Link>\n                                    </td>\n                                </tr>\n                                {/* Details row */}\n                                {selectedInterview &&\n                                    selectedInterview.id === dataset.id && (\n                                        <tr>\n                                            <td colSpan={9} className=\"px-4 py-2\">\n                                                <div className=\"text-sm\">\n                                                    <p>\n                                                        <strong>Persona:</strong> {dataset.persona}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Demographic Group:</strong> {dataset.demographic}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Sentiment</strong> {dataset.sentiment}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Behavior:</strong> {dataset.behavior}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Resdient:</strong> {dataset.resident_type}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Family Status:</strong> {dataset.family_status}\n                                                    </p>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                    )}\n                            </React.Fragment>\n                        ))}\n                    </tbody>\n                </table>\n\n            )}\n        </div>\n    );\n}\n\nexport default DatasetList;\n","/Users/jyotirmoysundi/git/openeval-ui/components/dataset-form.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/endpoint.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/evaluation.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/simulator.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/api/user.js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/Details.js",["233"],[],"import { Fragment } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { signIn, signOut } from 'next-auth/react';\nimport Image from 'next/image';\nimport { UserButton } from '@clerk/nextjs';\nimport {\n    ClerkProvider,\n    SignedIn,\n    SignedOut,\n    SignInButton\n} from '@clerk/nextjs';\nimport { useEffect, useState } from 'react';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport '../../../app/globals.css';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\n\nconst DatasetDetails = ({ datagen_id: datagen_id }) => {\n    // Existing code...\n\n    const [qaData, setQaData] = useState([]);\n    const { session } = useClerk();\n    const { isLoaded, userId, sessionId, getToken, orgId } = useAuth();\n    const [datasetName, setDatasetName] = useState('');\n    const [datasetTs, setDatasetTs] = useState('');\n    const [expandedReference, setExpandedReference] = useState(false);\n    const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n    const [chunkSize, setChunkSize] = useState(0);\n    const [sampleSize, setSampleSize] = useState(0);\n    const [persona, setPersona] = useState('');\n    const [behavior, setBehavior] = useState('');\n    const [demographic, setDemographic] = useState('');\n    const [sentiment, setSentiment] = useState('');\n    const [errorType, setErrorType] = useState('');\n    const [status, setStatus] = useState('');\n    const [dsType, setDsType] = useState('');\n    const [resident_type, setResidentType] = useState('');\n    const [family_status, setFamilyStatus] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n    const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const tableBodyExpandedCellStyle =\n    'px-6 py-4 leading-5 bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    useEffect(() => {\n        fetchDatasetDetails();\n        fetchChatData();\n    }, [session]);\n\n    if (!session) {\n        return null;\n    }\n\n    if(!datagen_id) {\n        return null;\n    }\n    const fetchChatData = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/qa-data`, {\n            params: {\n                dataset_id: datagen_id,\n                org_id: session.lastActiveOrganizationId,\n                skip: 0,  // Your desired skip value\n                limit: 100,  // Your desired limit value\n            },\n            });\n\n            const data = response.data;\n            console.log(data);  // Handle the retrieved data as needed\n            setQaData(data);\n        } catch (error) {\n            console.error('Error fetching QA data:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const fetchDatasetDetails = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/dataset`, {\n                params: {\n                    dataset_id: datagen_id,\n                    org_id: session.lastActiveOrganizationId,\n                },\n            });\n            const data = response.data;\n            console.log(data); // Handle the retrieved data as needed\n            setDatasetName(data.name);\n            setDatasetTs(data.ts);\n            setNumberOfQuestions(data.number_of_questions);\n            setSampleSize(data.sample_size);\n            setChunkSize(data.chunk_size ?? 2000);\n            setPersona(data.persona);\n            setBehavior(data.behavior);\n            setDemographic(data.demographic);\n            setSentiment(data.sentiment);\n            setErrorType(data.error_type);\n            setDsType(data.dataset_type);\n            setResidentType(data.resident_type);\n            setFamilyStatus(data.family_status);\n            setStatus(data.status);\n        } catch (error) {\n            console.error('Error fetching dataset details:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    \n    return (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n\n            <div>\n                {/* Existing code... */}\n                {session ? (\n\n                    <div>\n                        <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n                            <h2 className=\"text-xl font-bold mb-4 items-center justify-center\">{datasetName} (.{dsType.toLowerCase()})</h2>\n                            <div className=\"grid grid-cols-12 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Created At:</div>\n                                    <div className=\"text-gray-700\">{new Date(datasetTs).toLocaleString()}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Questions Per Sample:</div>\n                                    <div className=\"text-gray-700\">{numberOfQuestions}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Sample Percentage:</div>\n                                    <div className=\"text-gray-700\">{sampleSize} %</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Chunk Size:</div>\n                                    <div className=\"text-gray-700\">{chunkSize}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Status:</div>\n                                    <div className=\"text-gray-700\">{status}</div>\n                                </div>\n                            </div>\n                            <div className=\"mt-4 grid grid-cols-12 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Persona:</div>\n                                    <div className=\"text-gray-700\">{persona}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Behavior:</div>\n                                    <div className=\"text-gray-700\">{behavior}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Demographic:</div>\n                                    <div className=\"text-gray-700\">{demographic}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Tone:</div>\n                                    <div className=\"text-gray-700\">{sentiment}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Resident:</div>\n                                    <div className=\"text-gray-700\">{resident_type}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Family Status:</div>\n                                    <div className=\"text-gray-700\">{family_status}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <table className=\"w-full mt-2 border-collapse border table-auto\">\n                            <thead>\n                                <tr>\n                                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                                    <th className={tableHeaderCellStyle}>Chat Messages</th>\n                                    <th className={tableHeaderCellStyle}>Reference Chunk</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {qaData.map((data) => (\n                                    <Fragment key={data.id}>\n                                        {expandedReference && expandedReference === data.id && (\n                                            <tr className=\"border-b\">\n                                                <td colSpan={3} className={tableBodyExpandedCellStyle}>\n                                                    <div className=\"text-sm\">\n                                                        <p>\n                                                            <strong>Reference Chunk:</strong> \n                                                        </p>\n                                                        <p>\n                                                            {data.reference_chunk}\n                                                        </p>\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        )}\n                                        <tr className=\"border-b\">\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>{data.ts}</td>\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>\n                                                <ul className=\"text-left space-y-4\">\n                                                    {JSON.parse(data.chat_messages).question_answer && (\n                                                        <li className='mb-2'> \n                                                            <strong>Question:</strong> {JSON.parse(data.chat_messages).question_answer.question}\n                                                            <br/>\n                                                            <strong>Answer:</strong> {JSON.parse(data.chat_messages).question_answer.answer}\n                                                        </li>\n                                                    )}\n                                                    {JSON.parse(data.chat_messages).question_answer &&\n                                                        [...Array(3).keys()].map((index) => (\n                                                            JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`] && (\n                                                                <li key={index + 1}>\n                                                                    <strong>Follow-up Question {index + 1}: </strong>\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`]},{' '}\n                                                                    <br/>\n                                                                    <strong>Follow-up Answer {index + 1}: </strong>{' '}\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_answer_${index + 1}`]}\n                                                                </li>\n                                                            )\n                                                        ))}\n                                                </ul>\n                                            </td>\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>\n                                                <button\n                                                    className=\"text-blue-500 underline cursor-pointer\"\n                                                    onClick={() => setExpandedReference(expandedReference === data.id ? null : data.id)}\n                                                >\n                                                    {expandedReference === data.id ? 'Collapse Reference' : 'Expand Reference'}\n                                                </button>\n                                                {/* {expandedReference === data.id && (\n                                                    <span className=\"mt-2\">\n                                                        {data.reference_chunk}\n                                                    </span>\n                                                )} */}\n                                            </td>\n                                        </tr>\n                                        \n                                    </Fragment>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ) : (\n                    <div>\n                    {!isLoading ? (\n                        <div>\n                            <p>\n                                Chat QA data generation is in progress for <span className=\"font-bold\">{datasetName}</span>\n                            </p>\n                            <button\n                                className=\"bg-gray-700 text-sm text-white px-4 py-2 rounded-md mt-4\"\n                                onClick={() => {\n                                    fetchDatasetDetails();\n                                    fetchChatData();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Refresh\n                            </button>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    </div>\n                )}\n                {/* Existing code... */}\n            </div>\n        </main>\n    );\n}\n\nexport default DatasetDetails;\n","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/Details.js",["234"],[],"import { Fragment } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { signIn, signOut } from 'next-auth/react';\nimport Image from 'next/image';\nimport { UserButton } from '@clerk/nextjs';\nimport {\n    ClerkProvider,\n    SignedIn,\n    SignedOut,\n    SignInButton\n} from '@clerk/nextjs';\nimport { useEffect, useState } from 'react';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport '../../../app/globals.css';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\n\nconst DatasetDetails = ({ llm_endpoint_id: llm_endpoint_id }) => {\n    // Existing code...\n\n    const [qaData, setQaData] = useState([]);\n    const { session } = useClerk();\n    const { isLoaded, userId, sessionId, getToken, orgId } = useAuth();\n    const [endpointName, setEndpointName] = useState('');\n    const [endpointURL, setEndpointURL] = useState('');\n    const [ts, setTs] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [accessToken, setAccessToken] = useState('');\n    const [payloadFormat, setPayloadFormat] = useState('');\n    const [payloadUserKey, setPayloadUserKey] = useState('');\n    const [payloadMessageKey, setPayloadMessageKey] = useState('');\n    const [payloadResponseKey, setPayloadResponseKey] = useState('');\n    const [httpMethod, setHttpMethod] = useState('');\n    const [request_per_minute, setRequestPerMinute] = useState('');\n\n    const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n  const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    useEffect(() => {\n        fetchDatasetDetails();\n    }, [session]);\n\n    if (!session) {\n        return null;\n    }\n\n    if(!llm_endpoint_id) {\n        return null;\n    }\n    \n\n    const fetchDatasetDetails = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/llm-endpoint`, {\n                params: {\n                    llm_endpoint_id: llm_endpoint_id,\n                    org_id: session.lastActiveOrganizationId,\n                },\n            });\n            const data = response.data;\n            console.log(data); // Handle the retrieved data as needed\n            setEndpointName(data.name);\n            setEndpointURL(data.endpoint_url);\n            setTs(data.ts);\n            setAccessToken(data.access_token);\n            setPayloadFormat(data.payload_format);\n            setPayloadUserKey(data.payload_user_key);\n            setPayloadMessageKey(data.payload_message_key);\n            setHttpMethod(data.http_method);\n            setRequestPerMinute(data.requests_per_minute);\n            setPayloadResponseKey(data.payload_response_key);\n        } catch (error) {\n            console.error('Error fetching dataset details:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    \n    return (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n\n            <div>\n                {/* Existing code... */}\n                {session && !isLoading ? (\n\n                    <div>\n                        <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n                            <h2 className=\"text-xl font-bold mb-4 items-center justify-center\">{endpointName}</h2>\n                            <div className=\"grid grid-cols-12 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Created At:</div>\n                                    <div className=\"text-gray-700\">{new Date(ts).toLocaleString()}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Name:</div>\n                                    <div className=\"text-gray-700\">{endpointName}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Endpoint URL:</div>\n                                    <div className=\"text-gray-700\">{endpointURL}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Access Token:</div>\n                                    <div className=\"text-gray-700\">{accessToken}</div>\n                                </div>\n                            </div>\n\n                            <div className=\"grid grid-cols-12 gap-2 text-sm mt-4\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload Format:</div>\n                                    <div className=\"text-gray-700\">{payloadFormat}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload User Key:</div>\n                                    <div className=\"text-gray-700\">{payloadUserKey}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload Message Key:</div>\n                                    <div className=\"text-gray-700\">{payloadMessageKey}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload Response Key:</div>\n                                    <div className=\"text-gray-700\">{payloadResponseKey}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">HTTP Method:</div>\n                                    <div className=\"text-gray-700\">{httpMethod}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Requests / Minute:</div>\n                                    <div className=\"text-gray-700\">{request_per_minute}</div>   \n                                </div>\n                            </div>\n                            \n                        </div>\n                        \n                    </div>\n                ) : (\n                    <div>\n                    {isLoading ? (\n                        <div>\n                            <p>\n                                Endpoint Details <span className=\"font-bold\">{endpointName}</span>\n                            </p>\n                            <button\n                                className=\"bg-gray-700 text-sm text-white px-4 py-2 rounded-md mt-4\"\n                                onClick={() => {\n                                    fetchDatasetDetails();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Refresh\n                            </button>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    </div>\n                )}\n                {/* Existing code... */}\n            </div>\n        </main>\n    );\n}\n\nexport default DatasetDetails;\n","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/components/EndpointList.tsx",["235"],[],"/Users/jyotirmoysundi/git/openeval-ui/components/EvaluationList.tsx",["236"],[],"'use client';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // You need to install axios if not already installed\nimport '../app/globals.css';\nimport Link from 'next/link';\nimport { faChevronRight, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { useAuth } from '@clerk/nextjs';\nimport { useClerk } from '@clerk/nextjs';\n\nfunction EvaluationList({ searchTerm }: { searchTerm: string }) {\n  const { isLoaded, userId, sessionId, getToken } = useAuth();\n  const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n  const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n  const [evaluations, setEvaluations] = useState([]);\n  const [selectedInterview, setSelectedInterview] = useState<any>(null);\n  const [userMessage, setUserMessage] =\n    useState(`No dataset found. Why not create a new dataset? Click the button\n  above to get started!`); // Message to display to the user\n  const [isLoading, setIsLoading] = useState(true);\n  const [successMessage, setSuccessMessage] = useState(0); // Message to display to the user\n  const { session } = useClerk();\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setIsLoading(true);\n\n        setSuccessMessage(1);\n        if (session?.lastActiveOrganizationId) {\n          setUserMessage(\n            `No llm/rag evaluations found. Why not create a new one ? Add a simiulation to get started in chat simulator`\n          );\n        } else {\n            setSuccessMessage(0);\n            setUserMessage(\n                'No organization found. Please create an organization first.'\n            );\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (session) {\n      fetchUserData();\n    }\n  }, [session]);\n\n  useEffect(() => {\n    // Fetch interviews using Prisma\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        if (searchTerm.trim() !== '') {\n          const searchResponse = await axios.get(\n            `${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/search`,{\n                params: {\n                    org_id: session?.lastActiveOrganizationId,\n                    user_id: userId,\n                    search: searchTerm,\n                },\n            });\n          setEvaluations(searchResponse.data);\n        } else {\n          const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/list`, {\n            params: {\n                user_id: userId,\n                org_id: session?.lastActiveOrganizationId,\n            },\n          });\n          console.log(response.data);\n          setEvaluations(response.data);\n        }\n        setIsLoading(false); // Data has been fetched\n        setSuccessMessage(1);\n      } catch (error: any) {\n        \n        setSuccessMessage(0);\n        console.error('Error fetching:', error);\n        setIsLoading(false); // Data fetching failed\n      }\n    };\n    if(session && session?.lastActiveOrganizationId) {\n        fetchData();\n    }\n  }, [searchTerm]);\n\n  if (!session) {\n    return null;\n  }\n\n\n  const handleRowClick = (interview: any) => {\n    setSelectedInterview((prevSelectedInterview: any) => {\n      if (prevSelectedInterview && prevSelectedInterview.id === interview.id) {\n        return null; // Hide details if the same row is clicked again\n      } else {\n        return interview; // Show details for the clicked row\n      }\n    });\n  };\n\n  if (isLoading || !isLoaded || !userId || !session) {\n    // Render loading message\n    return (\n      <div\n        className=\"container min-w-full text-sm\"\n        style={{ marginTop: '16px' }}\n      >\n        Loading...\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container min-w-full\" style={{ marginTop: '16px' }}>\n      {evaluations.length === 0 ? (\n        <div className=\"text-sm\">\n          <p>\n            {successMessage === 1 ? (\n              <>{userMessage}</>\n            ) : (\n              <div>\n                {userMessage}\n                <Link href={'/create-organization'} className=\"text-blue-500\">\n                  {' '}\n                  Click here to get started\n                </Link>\n              </div>\n            )}\n          </p>\n        </div>\n      ) : (\n        <table className=\"container min-w-full border-collapse border table-auto\" style={{ marginTop: '16px' }}>\n            <thead>\n                <tr>\n                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                    <th className={tableHeaderCellStyle}>Id</th>\n\n                    <th className={tableHeaderCellStyle}>Simulation</th>\n                    <th className={tableHeaderCellStyle}>Groundedness_Score</th>\n                    <th className={tableHeaderCellStyle}>Dataset</th>\n                    <th className={tableHeaderCellStyle}>Endpoint</th>\n                    <th className={tableHeaderCellStyle}>View</th>\n                </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n                {evaluations.map((evaluation:any) => (\n                <React.Fragment key={evaluation.simulation_id}>\n                    <tr key={evaluation.id} onClick={() => handleRowClick(evaluation)}>\n\n                        <td className={tableBodyCellStyle}>{new Date(evaluation.last_updated).toLocaleString()}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.evaluation_id}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.simulation_name}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.average_score.toFixed(4)}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.dataset_name}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.endpoint_name}</td>\n                        <td className={tableBodyCellStyle}>\n                            <Link href={`/view/evaluation/${evaluation.evaluation_id}`} rel=\"noopener noreferrer\">\n                            <FontAwesomeIcon\n                                icon={faChevronRight}\n                                className=\"text-sm text-gray-900 hover:text-blue-500\"\n                            />\n                            </Link>\n                        </td>\n                    </tr>\n                    {/* Details row */}\n                    {selectedInterview &&\n                    selectedInterview.id === evaluation.id && (\n                      <tr>\n                        <td colSpan={6} className={tableBodyCellStyle}>\n                          {/* Display additional details based on the selected interview */}\n                          <div>\n                            <strong>Simulation ID:</strong> {evaluation.simulation_id}\n                          </div>\n                          <div>\n                            <strong>Average Score:</strong> {evaluation.average_score}\n                          </div>\n                          <div>\n                            <strong>Dataset Name:</strong> {evaluation.dataset_name}\n                          </div>\n                          <div>\n                            <strong>Endpoint Name:</strong> {evaluation.endpoint_name}\n                          </div>\n                          <div>\n                            <strong>Simulation Name:</strong> {evaluation.simulation_name}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                </React.Fragment>\n                ))}\n            </tbody>\n            </table>\n      )}\n    </div>\n  );\n}\n\nexport default EvaluationList;\n","/Users/jyotirmoysundi/git/openeval-ui/components/endpoint-form.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/components/simulator-form.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/Details.js",["237"],[],"import { Fragment } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { signIn, signOut } from 'next-auth/react';\nimport Image from 'next/image';\nimport { UserButton } from '@clerk/nextjs';\nimport {\n    ClerkProvider,\n    SignedIn,\n    SignedOut,\n    SignInButton\n} from '@clerk/nextjs';\nimport { useEffect, useState } from 'react';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport '../../../app/globals.css';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\n\nconst DatasetDetails = ({ evaluation_id: evaluation_id }) => {\n\n    const [ qaData, setQaData] = useState([]);\n    const { session } = useClerk();\n    const { isLoaded, userId, sessionId, getToken, orgId } = useAuth();\n    const [ errorType, setErrorType] = useState('');\n    const [ isLoading, setIsLoading] = useState(false);\n    const [ average_score, setAverageScore ] = useState(0);\n    const [ dataset_name, setDatasetName ] = useState('');\n    const [ endpoint_name, setEndpointName ] = useState('');\n    const [ last_updated, setLastUpdated ] = useState('');\n    const [ number_of_evaluations, setNumberOfEvaluations ] = useState(0);\n    const [ simulation_id, setSimulationId ] = useState('');\n    const [ simulation_name, setSimulationName ] = useState('');\n    const [ expandedReference, setExpandedReference] = useState(false);\n    const [ distinct_users, setDistinctUsers] = useState(0);\n    const [ formSubmitted, setFormSubmitted ] = useState(false);\n\n    const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n    \n    const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const tableBodyExpandedCellStyle =\n    'px-6 py-4 leading-5 bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const [sortOrder, setSortOrder] = useState('asc');\n    const [scoreFilter, setScoreFilter] = useState(0);\n\n    // Function to toggle sorting order\n    const toggleSortOrder = () => {\n        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n        const sortedData = qaData.slice().sort((a, b) => {\n            const averageScoreA = calculateAverageScore(a);\n            const averageScoreB = calculateAverageScore(b);\n    \n            if (sortOrder === 'asc') {\n                return averageScoreA - averageScoreB;\n            } else {\n                return averageScoreB - averageScoreA;\n            }\n        });\n        setQaData(sortedData);\n    };\n\n    const fetchChatData = async () => {\n        try {\n            setFormSubmitted(true);\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/chat`, {\n            params: {\n                evaluation_id: evaluation_id,\n                org_id: session.lastActiveOrganizationId,\n                user_id: userId,\n                skip: 0,  // Your desired skip value\n                limit: 100,  // Your desired limit value\n                filter_score: scoreFilter,\n            },\n            });\n\n            const data = response.data;\n            setQaData(data);\n        } catch (error) {\n            console.error('Error fetching QA data:', error);\n        } finally {\n            setIsLoading(false);\n            setFormSubmitted(false);\n        }\n    };\n\n    const fetchEvaluationDetails = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/id`, {\n                params: {\n                    user_id: userId,\n                    org_id: session.lastActiveOrganizationId,\n                    evaluation_id: evaluation_id,\n                    org_id: session.lastActiveOrganizationId,\n                },\n            });\n            const data = response.data;\n            setSimulationName(data.simulation_name);\n            setSimulationId(data.simulation_id);\n            setLastUpdated(data.last_updated);\n            setNumberOfEvaluations(data.number_of_evaluations);\n            setAverageScore(data.average_score);\n            setDatasetName(data.dataset_name);\n            setEndpointName(data.endpoint_name);\n            setDistinctUsers(data.distinct_users);\n            \n        } catch (error) {\n            console.error('Error fetching dataset details:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleScoreFilterChange = (event) => {\n        setScoreFilter(event.target.value);\n    };\n\n    const applyScoreFilter = () => {\n        fetchChatData()\n    };\n\n    const calculateAverageScore = (data) => {\n        // Use the scores available in the loop to calculate the average\n        // For example, assuming scores are available in an array called 'scores'\n        const scores = [data.score.toFixed(4)]; // Add more scores if available\n        const averageScore = scores.reduce((sum, score) => sum + parseFloat(score), 0) / scores.length;\n    \n        return isNaN(averageScore) ? 'N/A' : averageScore.toFixed(4);\n    };\n\n    // Sort the data based on average score\n    \n\n    useEffect(() => {\n        fetchEvaluationDetails();\n        fetchChatData();\n    }, [session]);\n\n    if (!session) {\n        return null;\n    }\n\n    if(!evaluation_id) {\n        return null;\n    }\n    \n    \n    \n    return (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n\n            <div>\n                {/* Existing code... */}\n                {session ? (\n\n                    <div>\n                        <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n                            <h2 className=\"text-xl font-bold mb-4 items-center justify-center\">Evaluation</h2>\n                            <div className=\"grid grid-cols-8 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Completed At:</div>\n                                    <div className=\"text-gray-700\">{new Date(last_updated).toLocaleString()}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Dataset:</div>\n                                    <div className=\"text-gray-700\">{dataset_name}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">LLM Endpoint:</div>\n                                    <div className=\"text-gray-700\">{endpoint_name}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Simulation:</div>\n                                    <div className=\"text-gray-700\">({simulation_id}) {simulation_name}</div>\n                                </div>\n                            </div>\n                            <div className=\"mt-4 grid grid-cols-8 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Number of Evaluations:</div>\n                                    <div className=\"text-gray-700\">{number_of_evaluations}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Average Score:</div>\n                                    <div className=\"text-gray-700\">{average_score.toFixed(4)}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Distinct Users:</div>\n                                    <div className=\"text-gray-700\">{distinct_users}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Evaluation Id:</div>\n                                    <div className=\"text-gray-700\">{evaluation_id}</div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        <div className=\"mb-4 flex\">\n                            <label className=\"block text-gray-700 text-sm font-bold mt-2\">\n                                {/* Filter score greater than */}\n                            </label>\n                            <input\n                                type=\"text\"\n                                value={scoreFilter}\n                                onChange={handleScoreFilterChange}\n                                className=\"border border-gray-300 rounded-md w-24 px-2 py-1 text-sm text-gray-700\"\n                            />\n                            <button\n                                onClick={applyScoreFilter}\n                                className=\"ml-2 bg-gray-900 text-white px-4 py-2 rounded-md text-sm\"\n                                disabled={isLoading}\n                            >\n                                {isLoading ? 'Submitting...' : 'Filter scores above a threshold'}\n                            </button>\n                        </div>\n                        \n                        <table className=\"w-full mt-2 border-collapse border table-auto\">\n                            <thead>\n                                <tr>\n                                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                                    <th className={tableHeaderCellStyle}>Chat Messages</th>\n                                    {/* <th className={tableHeaderCellStyle} onClick={toggleSortOrder}>Groundedness Score</th>                                     */}\n                                    <th className={tableHeaderCellStyle} \n                                    onClick={toggleSortOrder}\n                                    style={{ cursor: 'pointer' }}\n                                    >\n                                        Average Score\n                                        {sortOrder === 'asc' ? ' ▲' : ' ▼'}\n                                    </th>\n                                    <th className={tableHeaderCellStyle}>Reference Chunk</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {qaData.map((data) => (\n                                    <Fragment key={data.id}>\n                                        {expandedReference === data.id && (\n                                            <tr className=\"border-b\">\n                                                <td colSpan={4} className={tableBodyExpandedCellStyle}>\n                                                    <div className=\"text-sm\">\n                                                        <p>\n                                                            <strong>Reference Chunk:</strong> \n                                                        </p>\n                                                        <p>\n                                                            {data.reference_chunk}\n                                                        </p>\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        )}\n                                        <tr className=\"border-b\">\n                                            <td className={tableBodyCellStyle}  style={{\"vertical-align\": \"top\"}}>\n                                                {new Date(data.timestamp).toLocaleString()}\n                                            </td>\n                                            <td className={tableBodyCellStyle}>\n                                                <ul className=\"text-left space-y-4\">\n                                                    {JSON.parse(data.chat_messages).question_answer && (\n                                                        <li className='mb-2'> \n                                                            <strong>Question:</strong> {JSON.parse(data.chat_messages).question_answer.question}\n                                                            <br/>\n                                                            <strong>Answer:</strong> {JSON.parse(data.chat_messages).question_answer.answer}\n                                                            <br/>\n                                                            <strong>LLM Endpoint Answer:</strong> {data.endpoint_response}\n                                                            <br/>\n                                                            <strong>Score: </strong>{' '}\n                                                            {data.score.toFixed(4)}\n                                                        </li>\n                                                    )}\n                                                    {JSON.parse(data.chat_messages).question_answer &&\n                                                        [...Array(3).keys()].map((index) => (\n                                                            JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`] && (\n                                                                <li key={index + 1}>\n                                                                    <strong>Follow-up Question {index + 1}: </strong>\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`]},{' '}\n                                                                    <br/>\n                                                                    <strong>Follow-up Answer {index + 1}: </strong>{' '}\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_answer_${index + 1}`]}\n                                                                    <br/>\n                                                                    <strong>LLM Endpoint Follow-up Answer {index + 1}: </strong>{' '}\n                                                                    {data.endpoint_response}\n                                                                    <br/>\n                                                                    <strong>Score: </strong>{' '}\n                                                                    {data.score.toFixed(4)}\n                                                                </li>\n                                                            )\n                                                        ))}\n                                                </ul>\n                                            </td>\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>\n                                                {calculateAverageScore(data)}\n                                            </td>\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>\n                                                <button\n                                                    className=\"text-blue-500 underline cursor-pointer\"\n                                                    onClick={() => setExpandedReference(expandedReference === data.id ? null : data.id)}\n                                                >\n                                                    {expandedReference === data.id ? 'Collapse Reference' : 'Expand Reference'}\n                                                </button>\n                                                {/* {expandedReference === data.id && (\n                                                    <div className=\"mt-2\">\n                                                        {data.reference_chunk}\n                                                    </div>\n                                                )} */}\n                                            </td>\n                                        </tr>\n                                        \n                                    </Fragment>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ) : (\n                    <div>\n                    {!isLoading && !formSubmitted ? (\n                        <div>\n                            <p>\n                                Chat QA data evaluation is in progress for evaluation id - <span className=\"font-bold\">{evaluation_id}</span>\n                            </p>\n                            <button\n                                className=\"bg-gray-700 text-sm text-white px-4 py-2 rounded-md mt-4\"\n                                onClick={() => {\n                                    fetchEvaluationDetails();\n                                    fetchChatData();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Refresh\n                            </button>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    </div>\n                )}\n                {/* Existing code... */}\n            </div>\n        </main>\n    );\n}\n\nexport default DatasetDetails;\n","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/Details.js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/components/SimulationList.tsx",["238"],[],{"ruleId":"239","severity":1,"message":"240","line":11,"column":1,"nodeType":"241","endLine":68,"endColumn":2},{"ruleId":"239","severity":1,"message":"240","line":12,"column":1,"nodeType":"241","endLine":62,"endColumn":2},{"ruleId":"239","severity":1,"message":"240","line":12,"column":1,"nodeType":"241","endLine":82,"endColumn":2},{"ruleId":"239","severity":1,"message":"240","line":12,"column":1,"nodeType":"241","endLine":86,"endColumn":2},{"ruleId":"239","severity":1,"message":"240","line":12,"column":1,"nodeType":"241","endLine":82,"endColumn":2},{"ruleId":"242","severity":1,"message":"243","line":95,"column":8,"nodeType":"244","endLine":95,"endColumn":20,"suggestions":"245"},{"ruleId":"242","severity":1,"message":"246","line":55,"column":8,"nodeType":"244","endLine":55,"endColumn":17,"suggestions":"247"},{"ruleId":"242","severity":1,"message":"248","line":46,"column":8,"nodeType":"244","endLine":46,"endColumn":17,"suggestions":"249"},{"ruleId":"242","severity":1,"message":"243","line":95,"column":6,"nodeType":"244","endLine":95,"endColumn":18,"suggestions":"250"},{"ruleId":"242","severity":1,"message":"251","line":93,"column":6,"nodeType":"244","endLine":93,"endColumn":18,"suggestions":"252"},{"ruleId":"242","severity":1,"message":"253","line":143,"column":8,"nodeType":"244","endLine":143,"endColumn":17,"suggestions":"254"},{"ruleId":"242","severity":1,"message":"251","line":97,"column":6,"nodeType":"244","endLine":97,"endColumn":18,"suggestions":"255"},"@next/next/no-async-client-component","Prevent client components from being async functions. See: https://nextjs.org/docs/messages/no-async-client-component","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'session'. Either include it or remove the dependency array.","ArrayExpression",["256"],"React Hook useEffect has missing dependencies: 'fetchChatData' and 'fetchDatasetDetails'. Either include them or remove the dependency array.",["257"],"React Hook useEffect has a missing dependency: 'fetchDatasetDetails'. Either include it or remove the dependency array.",["258"],["259"],"React Hook useEffect has missing dependencies: 'session' and 'userId'. Either include them or remove the dependency array.",["260"],"React Hook useEffect has missing dependencies: 'fetchChatData' and 'fetchEvaluationDetails'. Either include them or remove the dependency array.",["261"],["262"],{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"263","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"270","fix":"274"},"Update the dependencies array to be: [searchTerm, session]",{"range":"275","text":"276"},"Update the dependencies array to be: [fetchChatData, fetchDatasetDetails, session]",{"range":"277","text":"278"},"Update the dependencies array to be: [fetchDatasetDetails, session]",{"range":"279","text":"280"},{"range":"281","text":"276"},"Update the dependencies array to be: [searchTerm, session, userId]",{"range":"282","text":"283"},"Update the dependencies array to be: [fetchChatData, fetchEvaluationDetails, session]",{"range":"284","text":"285"},{"range":"286","text":"283"},[4035,4047],"[searchTerm, session]",[2275,2284],"[fetchChatData, fetchDatasetDetails, session]",[1888,1897],"[fetchDatasetDetails, session]",[3492,3504],[3395,3407],"[searchTerm, session, userId]",[5449,5458],"[fetchChatData, fetchEvaluationDetails, session]",[3501,3513]]