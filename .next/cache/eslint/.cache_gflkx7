[{"/Users/jyotirmoysundi/git/openeval-ui/app/api/auth/[...nextauth]/route.ts":"1","/Users/jyotirmoysundi/git/openeval-ui/app/auth.ts":"2","/Users/jyotirmoysundi/git/openeval-ui/app/authprovider.tsx":"3","/Users/jyotirmoysundi/git/openeval-ui/app/cicd/page.tsx":"4","/Users/jyotirmoysundi/git/openeval-ui/app/create-organization/[[...create-organization]]/page.tsx":"5","/Users/jyotirmoysundi/git/openeval-ui/app/dismiss-button.tsx":"6","/Users/jyotirmoysundi/git/openeval-ui/app/evaluation/page.tsx":"7","/Users/jyotirmoysundi/git/openeval-ui/app/layout.tsx":"8","/Users/jyotirmoysundi/git/openeval-ui/app/llmhub/page.tsx":"9","/Users/jyotirmoysundi/git/openeval-ui/app/loading.tsx":"10","/Users/jyotirmoysundi/git/openeval-ui/app/nav.tsx":"11","/Users/jyotirmoysundi/git/openeval-ui/app/navbar.tsx":"12","/Users/jyotirmoysundi/git/openeval-ui/app/openai-key/page.tsx":"13","/Users/jyotirmoysundi/git/openeval-ui/app/organization-profile/[[...organization-profile]]/page.tsx":"14","/Users/jyotirmoysundi/git/openeval-ui/app/organization-switcher/[[...organization-switcher]]/page.tsx":"15","/Users/jyotirmoysundi/git/openeval-ui/app/page.tsx":"16","/Users/jyotirmoysundi/git/openeval-ui/app/search.tsx":"17","/Users/jyotirmoysundi/git/openeval-ui/app/settings/page.tsx":"18","/Users/jyotirmoysundi/git/openeval-ui/app/sign-in/page.tsx":"19","/Users/jyotirmoysundi/git/openeval-ui/app/sign-in-buttons.tsx":"20","/Users/jyotirmoysundi/git/openeval-ui/app/sign-up/[[...sign-up]]/page.tsx":"21","/Users/jyotirmoysundi/git/openeval-ui/app/simulate/page.tsx":"22","/Users/jyotirmoysundi/git/openeval-ui/app/table.tsx":"23","/Users/jyotirmoysundi/git/openeval-ui/app/toast.tsx":"24","/Users/jyotirmoysundi/git/openeval-ui/app/tokens/page.tsx":"25","/Users/jyotirmoysundi/git/openeval-ui/pages/_app.tsx":"26","/Users/jyotirmoysundi/git/openeval-ui/pages/add/dataset.tsx":"27","/Users/jyotirmoysundi/git/openeval-ui/pages/add/endpoint.tsx":"28","/Users/jyotirmoysundi/git/openeval-ui/pages/add/evaluation.tsx":"29","/Users/jyotirmoysundi/git/openeval-ui/pages/add/simulator.tsx":"30","/Users/jyotirmoysundi/git/openeval-ui/pages/api/user.js":"31","/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/Details.js":"32","/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/[id].js":"33","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/Details.js":"34","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/[id].js":"35","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/[id].js":"36","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/dashboard.jsx":"37","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/details.js":"38","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/line-chart.js":"39","/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/Details.js":"40","/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/[id].js":"41","/Users/jyotirmoysundi/git/openeval-ui/components/DatasetList.tsx":"42","/Users/jyotirmoysundi/git/openeval-ui/components/EndpointList.tsx":"43","/Users/jyotirmoysundi/git/openeval-ui/components/EvaluationList.tsx":"44","/Users/jyotirmoysundi/git/openeval-ui/components/SimulationList.tsx":"45","/Users/jyotirmoysundi/git/openeval-ui/components/dataset-form.tsx":"46","/Users/jyotirmoysundi/git/openeval-ui/components/endpoint-form.tsx":"47","/Users/jyotirmoysundi/git/openeval-ui/components/simulator-form.tsx":"48"},{"size":74,"mtime":1703433337525,"results":"49","hashOfConfig":"50"},{"size":976,"mtime":1703229579179,"results":"51","hashOfConfig":"50"},{"size":229,"mtime":1703229228337,"results":"52","hashOfConfig":"50"},{"size":1944,"mtime":1703258455231,"results":"53","hashOfConfig":"50"},{"size":696,"mtime":1703886473510,"results":"54","hashOfConfig":"50"},{"size":399,"mtime":1703259203047,"results":"55","hashOfConfig":"50"},{"size":1995,"mtime":1705171741827,"results":"56","hashOfConfig":"50"},{"size":943,"mtime":1705776264542,"results":"57","hashOfConfig":"50"},{"size":2807,"mtime":1705776701370,"results":"58","hashOfConfig":"50"},{"size":196,"mtime":1703229529278,"results":"59","hashOfConfig":"50"},{"size":128,"mtime":1703229458388,"results":"60","hashOfConfig":"50"},{"size":9810,"mtime":1705776254037,"results":"61","hashOfConfig":"50"},{"size":6106,"mtime":1705264382409,"results":"62","hashOfConfig":"50"},{"size":307,"mtime":1703281221581,"results":"63","hashOfConfig":"50"},{"size":470,"mtime":1703281218876,"results":"64","hashOfConfig":"50"},{"size":3065,"mtime":1705776243780,"results":"65","hashOfConfig":"50"},{"size":681,"mtime":1703231045636,"results":"66","hashOfConfig":"50"},{"size":5075,"mtime":1705273676204,"results":"67","hashOfConfig":"50"},{"size":541,"mtime":1704043252189,"results":"68","hashOfConfig":"50"},{"size":1723,"mtime":1705264482974,"results":"69","hashOfConfig":"50"},{"size":255,"mtime":1704043063747,"results":"70","hashOfConfig":"50"},{"size":2814,"mtime":1705695506060,"results":"71","hashOfConfig":"50"},{"size":913,"mtime":1699122423066,"results":"72","hashOfConfig":"50"},{"size":171,"mtime":1699122423066,"results":"73","hashOfConfig":"50"},{"size":5172,"mtime":1705795316384,"results":"74","hashOfConfig":"50"},{"size":1409,"mtime":1705777229558,"results":"75","hashOfConfig":"50"},{"size":648,"mtime":1705449010764,"results":"76","hashOfConfig":"50"},{"size":651,"mtime":1703562742846,"results":"77","hashOfConfig":"50"},{"size":654,"mtime":1703562762739,"results":"78","hashOfConfig":"50"},{"size":656,"mtime":1703573472117,"results":"79","hashOfConfig":"50"},{"size":810,"mtime":1703577342151,"results":"80","hashOfConfig":"50"},{"size":14441,"mtime":1705776644158,"results":"81","hashOfConfig":"50"},{"size":906,"mtime":1705658113145,"results":"82","hashOfConfig":"50"},{"size":7707,"mtime":1703712339627,"results":"83","hashOfConfig":"50"},{"size":900,"mtime":1705658182161,"results":"84","hashOfConfig":"50"},{"size":898,"mtime":1705658128283,"results":"85","hashOfConfig":"50"},{"size":2901,"mtime":1705777452100,"results":"86","hashOfConfig":"50"},{"size":19455,"mtime":1705695925601,"results":"87","hashOfConfig":"50"},{"size":1862,"mtime":1705777553324,"results":"88","hashOfConfig":"50"},{"size":9106,"mtime":1705696018797,"results":"89","hashOfConfig":"50"},{"size":898,"mtime":1705658132385,"results":"90","hashOfConfig":"50"},{"size":12723,"mtime":1705776276255,"results":"91","hashOfConfig":"50"},{"size":8579,"mtime":1705658300730,"results":"92","hashOfConfig":"50"},{"size":9189,"mtime":1705695829986,"results":"93","hashOfConfig":"50"},{"size":10898,"mtime":1705695544427,"results":"94","hashOfConfig":"50"},{"size":27521,"mtime":1705470946239,"results":"95","hashOfConfig":"50"},{"size":16070,"mtime":1705449654699,"results":"96","hashOfConfig":"50"},{"size":16498,"mtime":1705695781497,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v9rnx3",{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jyotirmoysundi/git/openeval-ui/app/api/auth/[...nextauth]/route.ts",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/auth.ts",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/authprovider.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/cicd/page.tsx",["251"],[],"'use client'\n\nimport { sql } from '@vercel/postgres';\nimport { Card, Title, Text, Button, Grid } from '@tremor/react';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/solid';\nimport { use, useEffect, useState } from 'react';\nimport '../globals.css';\n\nexport default async function IndexPage({\n  searchParams\n}: {\n  searchParams: { q: string };\n}) {\n  \n  const { session } = useClerk();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Check if there is an active session\n  if (!session) {\n    // Handle the case where there is no active session\n    return null;\n  }\n\n  const handleSearch = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setSearchTerm(event.currentTarget.value);\n    }\n  };\n\n  return (\n    <div>\n      {session ? (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n          \n          <div className=\"flex justify-between items-center\">\n            {' '}\n            \n            <Link href=\"/add/dataset\">\n              <Button className=\"bg-gray-900 text-white hover:bg-gray-700 border-white hover:border-white pl-4\">\n                <span className=\"relative inline-flex items-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"1.5\"\n                    stroke=\"currentColor\"\n                    className=\"w-4 h-4\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      d=\"M12 4.5v15m7.5-7.5h-15\"\n                    />\n                  </svg>\n                  &nbsp; Setup CICD\n                </span>\n              </Button>\n            </Link>\n          </div>\n        </main>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}","/Users/jyotirmoysundi/git/openeval-ui/app/create-organization/[[...create-organization]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/dismiss-button.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/evaluation/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/layout.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/llmhub/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/loading.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/nav.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/navbar.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/openai-key/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/organization-profile/[[...organization-profile]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/organization-switcher/[[...organization-switcher]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/search.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/settings/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/sign-in/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/sign-in-buttons.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/sign-up/[[...sign-up]]/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/simulate/page.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/table.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/toast.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/app/tokens/page.tsx",["252"],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/_app.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/dataset.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/endpoint.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/evaluation.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/add/simulator.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/api/user.js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/Details.js",["253"],[],"import { Fragment } from 'react';\nimport { useEffect, useState } from 'react';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport '../../../app/globals.css';\nimport axios from 'axios';\n\nconst DatasetDetails = ({ datagen_id: datagen_id, size: size }) => {\n\n    const [qaData, setQaData] = useState([]);\n    const { session } = useClerk();\n    const [datasetName, setDatasetName] = useState('');\n    const [datasetTs, setDatasetTs] = useState('');\n    const [expandedReference, setExpandedReference] = useState(false);\n    const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n    const [chunkSize, setChunkSize] = useState(0);\n    const [sampleSize, setSampleSize] = useState(0);\n    const [persona, setPersona] = useState('');\n    const [dataSource, setDataSource] = useState('');\n    const [tags, setTags] = useState('');\n    const [status, setStatus] = useState('');\n    const [dsType, setDsType] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [isCompleted, setIsCompleted] = useState(false);\n    const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n    const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const tableBodyExpandedCellStyle =\n    'px-6 py-4 leading-5 bg-white text-sm text-gray-900 whitespace-no-wrap leading-5';\n\n    // useEffect(() => {\n    //     fetchDatasetDetails();\n    //     fetchChatData();\n    // }, [session]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetchDatasetDetails();\n            await fetchChatData();\n        };\n    \n        if (status === 'completed' || status === 'error') {\n            setIsCompleted(true);\n        } else {\n            fetchData();\n\n            const interval = setInterval(() => {\n                fetchData();\n            }, 5000); // Fetch data every 5 seconds\n    \n            return () => clearInterval(interval);\n        }\n        \n    }, [session, status]); // Add status as a dependency\n    \n    \n    if (!session) {\n        return null;\n    }\n\n    if(!datagen_id) {\n        return null;\n    }\n    const fetchChatData = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/qa-data`, {\n            params: {\n                dataset_id: datagen_id,\n                org_id: session.lastActiveOrganizationId,\n                skip: 0,  // Your desired skip value\n                limit: 100,  // Your desired limit value\n            },\n            });\n\n            const data = response.data;\n            setQaData(data);\n        } catch (error) {\n            console.error('Error fetching QA data:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const fetchDatasetDetails = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/dataset`, {\n                params: {\n                    dataset_id: datagen_id,\n                    org_id: session.lastActiveOrganizationId,\n                },\n            });\n            const data = response.data;\n            setDatasetName(data.name);\n            setDatasetTs(data.ts);\n            setNumberOfQuestions(data.number_of_questions);\n            setSampleSize(data.sample_size);\n            setChunkSize(data.chunk_size ?? 2000);\n            setPersona(data.persona);\n            setDsType(data.dataset_type);\n            setStatus(data.status);\n            setDataSource(data.data_source);\n            setErrorMessage(data.error_msg);\n            setTags(data.tags);\n\n        } catch (error) {\n            console.error('Error fetching dataset details:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    \n    return (\n        <main className={`p-4 md:p-10 mx-auto max-w-${size}`}>\n\n            <div>\n                {/* Existing code... */}\n                {session ? (\n\n                    <div>\n                        <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n                            <h2 className=\"text-xl font-bold mb-4 items-center justify-center\">\n                                {datasetName} (.{dsType.toLowerCase()}) \n\n                            </h2>\n                            <div className=\"grid grid-cols-12 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Created At:</div>\n                                    <div className=\"text-gray-700\">{new Date(datasetTs).toLocaleString()}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Questions Per Sample:</div>\n                                    <div className=\"text-gray-700\">{numberOfQuestions}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Sample Percentage:</div>\n                                    <div className=\"text-gray-700\">{sampleSize} %</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Chunk Size:</div>\n                                    <div className=\"text-gray-700\">{chunkSize}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Status:</div>\n                                    <div className={status === 'completed' ? 'text-green-500' : 'text-red-500'}>\n                                        {status}\n                                    </div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Data Source:</div>\n                                    <div className=\"text-gray-700\">{dataSource}</div>\n                                </div>\n\n                                \n                            </div>\n                            <div className=\"mt-4 grid grid-cols-2 gap-8 text-sm\">\n                                <div className=\"col-span-12\">\n                                    <div className=\"font-bold mb-2\">Persona:</div>\n                                    <div className=\"text-gray-700\">{persona}</div>\n                                </div>\n                            </div>\n                            <div className=\"mt-4 grid grid-cols-2 gap-8 text-sm\">\n                                <div className=\"col-span-12\">\n                                    <div className=\"font-bold mb-2\">Tags:</div>\n                                    <div className=\"text-gray-700\">{tags}</div>\n                                </div>\n                            </div>\n                            {!isCompleted && (\n                                <div className=\"mt-4 grid grid-cols-12 text-sm\">\n                                    <div className=\"flex justify-start items-justify-start\">\n                                        <div className=\"loader\"></div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                        <table className=\"w-full mt-2 border-collapse border table-auto\">\n                            <thead>\n                                <tr>\n                                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                                    <th className={tableHeaderCellStyle}>Chat Messages</th>\n                                    <th className={tableHeaderCellStyle}>Reference Chunk</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { qaData.length === 0 && (\n                                    <tr className=\"border-b\">\n                                        <td colSpan={3} className={tableBodyCellStyle}>\n                                            <div className=\"text-sm\">\n                                                <p>\n                                                    {errorMessage}\n                                                </p>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    \n                                )}\n                                { qaData.length > 0 && qaData.map((data) => (\n                                    <Fragment key={data.id}>\n                                        {expandedReference && expandedReference === data.id && (\n                                            <tr className=\"border-b\">\n                                                <td colSpan={3} className={tableBodyExpandedCellStyle}>\n                                                    <div className=\"text-sm\">\n                                                        <p>\n                                                            <strong>Reference Chunk:</strong> \n                                                        </p>\n                                                        <p>\n                                                            {data.reference_chunk}\n                                                        </p>\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        )}\n                                        <tr className=\"border-b\">\n                                            <td className={tableBodyCellStyle} style={{\"verticalAlign\": \"top\"}}>{data.ts}</td>\n                                            <td className={tableBodyCellStyle} style={{\"verticalAlign\": \"top\"}}>\n                                                <ul className=\"text-left space-y-4\">\n                                                    {JSON.parse(data.chat_messages).question_answer && (\n                                                        <li className='mb-2'> \n                                                            <strong>Question:</strong> {JSON.parse(data.chat_messages).question_answer.question}\n                                                            <br/>\n                                                            <strong>Answer:</strong> {JSON.parse(data.chat_messages).question_answer.answer}\n                                                        </li>\n                                                    )}\n                                                    {JSON.parse(data.chat_messages).question_answer &&\n                                                        [...Array(3).keys()].map((index) => (\n                                                            JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`] && (\n                                                                <li key={index + 1}>\n                                                                    <strong>Follow-up Question {index + 1}: </strong>\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`]},{' '}\n                                                                    <br/>\n                                                                    <strong>Follow-up Answer {index + 1}: </strong>{' '}\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_answer_${index + 1}`]}\n                                                                </li>\n                                                            )\n                                                        ))}\n                                                </ul>\n                                            </td>\n                                            <td className={tableBodyCellStyle} style={{\"verticalAlign\": \"top\"}}>\n                                                <button\n                                                    className=\"text-blue-500 underline cursor-pointer\"\n                                                    onClick={() => setExpandedReference(expandedReference === data.id ? null : data.id)}\n                                                >\n                                                    {expandedReference === data.id ? 'Collapse Reference' : 'Expand Reference'}\n                                                </button>\n                                            \n                                            </td>\n                                        </tr>\n                                        \n                                    </Fragment>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ) : (\n                    <div>\n                    {!isLoading ? (\n                        <div>\n                            <p>\n                                Chat QA data generation is in progress for <span className=\"font-bold\">{datasetName}</span>\n                            </p>\n                            <button\n                                className=\"bg-gray-700 text-sm text-white px-4 py-2 rounded-md mt-4\"\n                                onClick={() => {\n                                    fetchDatasetDetails();\n                                    fetchChatData();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Refresh\n                            </button>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    </div>\n                )}\n                {/* Existing code... */}\n            </div>\n        </main>\n    );\n}\n\nexport default DatasetDetails;\n","/Users/jyotirmoysundi/git/openeval-ui/pages/view/datasets/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/Details.js",["254"],[],"import { Fragment } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { signIn, signOut } from 'next-auth/react';\nimport Image from 'next/image';\nimport { UserButton } from '@clerk/nextjs';\nimport {\n    ClerkProvider,\n    SignedIn,\n    SignedOut,\n    SignInButton\n} from '@clerk/nextjs';\nimport { useEffect, useState } from 'react';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport '../../../app/globals.css';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\n\nconst DatasetDetails = ({ llm_endpoint_id: llm_endpoint_id }) => {\n    // Existing code...\n\n    const [qaData, setQaData] = useState([]);\n    const { session } = useClerk();\n    const { isLoaded, userId, sessionId, getToken, orgId } = useAuth();\n    const [endpointName, setEndpointName] = useState('');\n    const [endpointURL, setEndpointURL] = useState('');\n    const [ts, setTs] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [accessToken, setAccessToken] = useState('');\n    const [payloadFormat, setPayloadFormat] = useState('');\n    const [payloadUserKey, setPayloadUserKey] = useState('');\n    const [payloadMessageKey, setPayloadMessageKey] = useState('');\n    const [payloadResponseKey, setPayloadResponseKey] = useState('');\n    const [httpMethod, setHttpMethod] = useState('');\n    const [request_per_minute, setRequestPerMinute] = useState('');\n\n    const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n  const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    useEffect(() => {\n        fetchDatasetDetails();\n    }, [session]);\n\n    if (!session) {\n        return null;\n    }\n\n    if(!llm_endpoint_id) {\n        return null;\n    }\n    \n\n    const fetchDatasetDetails = async () => {\n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/llm-endpoint`, {\n                params: {\n                    llm_endpoint_id: llm_endpoint_id,\n                    org_id: session.lastActiveOrganizationId,\n                },\n            });\n            const data = response.data;\n            console.log(data); // Handle the retrieved data as needed\n            setEndpointName(data.name);\n            setEndpointURL(data.endpoint_url);\n            setTs(data.ts);\n            setAccessToken(data.access_token);\n            setPayloadFormat(data.payload_format);\n            setPayloadUserKey(data.payload_user_key);\n            setPayloadMessageKey(data.payload_message_key);\n            setHttpMethod(data.http_method);\n            setRequestPerMinute(data.requests_per_minute);\n            setPayloadResponseKey(data.payload_response_key);\n        } catch (error) {\n            console.error('Error fetching dataset details:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    \n    return (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n\n            <div>\n                {/* Existing code... */}\n                {session && !isLoading ? (\n\n                    <div>\n                        <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n                            <h2 className=\"text-xl font-bold mb-4 items-center justify-center\">{endpointName}</h2>\n                            <div className=\"grid grid-cols-12 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Created At:</div>\n                                    <div className=\"text-gray-700\">{new Date(ts).toLocaleString()}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Name:</div>\n                                    <div className=\"text-gray-700\">{endpointName}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Endpoint URL:</div>\n                                    <div className=\"text-gray-700\">{endpointURL}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Access Token:</div>\n                                    <div className=\"text-gray-700\">{accessToken}</div>\n                                </div>\n                            </div>\n\n                            <div className=\"grid grid-cols-12 gap-2 text-sm mt-4\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload Format:</div>\n                                    <div className=\"text-gray-700\">{payloadFormat}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload User Key:</div>\n                                    <div className=\"text-gray-700\">{payloadUserKey}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload Message Key:</div>\n                                    <div className=\"text-gray-700\">{payloadMessageKey}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Payload Response Key:</div>\n                                    <div className=\"text-gray-700\">{payloadResponseKey}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">HTTP Method:</div>\n                                    <div className=\"text-gray-700\">{httpMethod}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Requests / Minute:</div>\n                                    <div className=\"text-gray-700\">{request_per_minute}</div>   \n                                </div>\n                            </div>\n                            \n                        </div>\n                        \n                    </div>\n                ) : (\n                    <div>\n                    {isLoading ? (\n                        <div>\n                            <p>\n                                Endpoint Details <span className=\"font-bold\">{endpointName}</span>\n                            </p>\n                            <button\n                                className=\"bg-gray-700 text-sm text-white px-4 py-2 rounded-md mt-4\"\n                                onClick={() => {\n                                    fetchDatasetDetails();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Refresh\n                            </button>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    </div>\n                )}\n                {/* Existing code... */}\n            </div>\n        </main>\n    );\n}\n\nexport default DatasetDetails;\n","/Users/jyotirmoysundi/git/openeval-ui/pages/view/endpoints/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/dashboard.jsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/details.js",["255"],[],"import { Fragment } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { signIn, signOut } from 'next-auth/react';\nimport Image from 'next/image';\nimport { UserButton } from '@clerk/nextjs';\nimport {\n    ClerkProvider,\n    SignedIn,\n    SignedOut,\n    SignInButton\n} from '@clerk/nextjs';\nimport { useEffect, useState } from 'react';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport '../../../app/globals.css';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { Dashboard } from './dashboard';\nimport Link from 'next/link';\n\nconst DatasetDetails = ({ evaluation_id: evaluation_id }) => {\n\n    const [ qaData, setQaData] = useState([]);\n    const { session } = useClerk();\n    const { isLoaded, userId, sessionId, getToken, orgId } = useAuth();\n    const [ errorType, setErrorType] = useState('');\n    const [ isLoading, setIsLoading] = useState(false);\n    const [ average_score, setAverageScore ] = useState(0);\n    const [ dataset_name, setDatasetName ] = useState('');\n    const [ endpoint_name, setEndpointName ] = useState('');\n    const [ last_updated, setLastUpdated ] = useState('');\n    const [ number_of_evaluations, setNumberOfEvaluations ] = useState(0);\n    const [ simulation_id, setSimulationId ] = useState('');\n    const [ simulation_name, setSimulationName ] = useState('');\n    const [ expandedReference, setExpandedReference] = useState(false);\n    const [ distinct_users, setDistinctUsers] = useState(0);\n    const [ formSubmitted, setFormSubmitted ] = useState(false);\n    const [evaluationRunsScoreData, setEvaluationRunsScoreData] = useState([]);\n    const [simulation_run_id, setSimulationRunId] = useState(null);\n    const [simulation_run_ids, setSimulationRunIds] = useState([]);\n    const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n    \n    const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const tableBodyExpandedCellStyle =\n    'px-6 py-4 leading-5 bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const [sortOrder, setSortOrder] = useState('asc');\n    const [scoreFilter, setScoreFilter] = useState(0);\n\n    const handleSimulationRunIdChange = (event) => {\n        setSimulationRunId(event.target.value);\n    };\n\n    // Function to toggle sorting order\n    const toggleSortOrder = () => {\n        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n        const sortedData = qaData.slice().sort((a, b) => {\n            const averageScoreA = calculateAverageScore(a);\n            const averageScoreB = calculateAverageScore(b);\n    \n            if (sortOrder === 'asc') {\n                return averageScoreA - averageScoreB;\n            } else {\n                return averageScoreB - averageScoreA;\n            }\n        });\n        setQaData(sortedData);\n    };\n\n    const fetchChatData = async () => {\n        try {\n            if (!simulation_run_id)\n                return;\n            setFormSubmitted(true);\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/chat`, {\n            params: {\n                evaluation_id: evaluation_id,\n                org_id: session.lastActiveOrganizationId,\n                user_id: userId,\n                skip: 0,  // Your desired skip value\n                limit: 100,  // Your desired limit value\n                filter_score: scoreFilter,\n                simulation_run_id: parseInt(simulation_run_id),\n            },\n            });\n\n            const data = response.data;\n            setQaData(data);\n        } catch (error) {\n            console.error('Error fetching QA data:', error);\n        } finally {\n            setIsLoading(false);\n            setFormSubmitted(false);\n        }\n    };\n\n    const fetchEvaluationDetails = async () => {\n       \n        try {\n            setIsLoading(true);\n            const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/id`, {\n                params: {\n                    user_id: userId,\n                    org_id: session.lastActiveOrganizationId,\n                    evaluation_id: evaluation_id,\n                    org_id: session.lastActiveOrganizationId,\n                },\n            });\n            const data = response.data[0];\n            setSimulationName(data.simulation_name);\n            setSimulationId(data.simulation_id);\n            setLastUpdated(data.last_updated);\n            setNumberOfEvaluations(data.number_of_evaluations);\n            setAverageScore(data.average_score);\n            setDatasetName(data.dataset_name);\n            setEndpointName(data.endpoint_name);\n            setDistinctUsers(data.distinct_users);\n            setEvaluationRunsScoreData(response.data);\n            setSimulationRunIds(response.data.map((data) => data.simulation_run_id));\n            if (!simulation_run_id) {\n                setSimulationRunId(response.data[0].simulation_run_id);\n            }\n        } catch (error) {\n            console.error('Error fetching dataset details:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleScoreFilterChange = (event) => {\n        setScoreFilter(event.target.value);\n    };\n\n    const applyScoreFilter = () => {\n        fetchChatData()\n    };\n\n    const calculateAverageScore = (data) => {\n        // Use the scores available in the loop to calculate the average\n        // For example, assuming scores are available in an array called 'scores'\n        const scores = [data.score.toFixed(4)]; // Add more scores if available\n        const averageScore = scores.reduce((sum, score) => sum + parseFloat(score), 0) / scores.length;\n    \n        return isNaN(averageScore) ? 'N/A' : averageScore.toFixed(4);\n    };\n    \n\n    useEffect(() => {\n        fetchEvaluationDetails();\n        fetchChatData();\n        setSimulationRunId(simulation_run_id);\n    }, [session, simulation_run_id, scoreFilter]);\n\n    if (!session) {\n        return null;\n    }\n\n    if(!evaluation_id || !simulation_id) {\n        return null;\n    }\n    \n    \n    \n    return (\n        <main className=\"p-4 md:p-10 mx-auto max-w-7xl\">\n\n            <div>\n                {session ? (\n\n                    <div>\n                        \n                        <div className=\"mb-6 flex items-center space-x-4 bg-white p-4 rounded-lg shadow-md\">\n                            { simulation_run_ids.length > 0 && (\n                                <Dashboard \n                                number_of_evaluations={number_of_evaluations}\n                                mean_score={average_score.toFixed(4)}\n                                distinct_users_simulated={distinct_users}\n                                evaluations={evaluationRunsScoreData}\n                                total_simulations={simulation_run_ids.length}\n                                />\n                            )}\n                        </div>\n\n                        <div className=\"mb-6 flex items-center space-x-4 bg-white p-4 rounded-lg shadow-md\">\n                            <div className=\"font-bold\">\n                                Total Chat QA Data: <span className=\"text-gray-700 font-normal\">{qaData.length}</span>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-2\">\n                                <label htmlFor=\"simulationRunIdSelect\" className=\"font-bold\">\n                                    Select Evaluation Run ID:\n                                </label>\n                                <select\n                                    id=\"simulationRunIdSelect\"\n                                    onChange={handleSimulationRunIdChange}\n                                    value={simulation_run_id}\n                                    className=\"border border-gray-300 rounded-md w-36 py-1 text-sm text-gray-700 bg-white hover:border-blue-500 focus:border-blue-500\"\n                                >\n                                    <option value=\"\">Select Run ID</option>\n                                    {simulation_run_ids.map(runId => (\n                                        <option key={runId} value={runId}>{runId}</option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            <button\n                                onClick={applyScoreFilter}\n                                className=\"bg-gray-900 hover:bg-gray-500 text-white px-4 py-2 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-300 disabled:opacity-50\"\n                                disabled={isLoading}\n                            >\n                                {isLoading ? 'Submitting...' : 'Filter Scores above Threshold'}\n                            </button>\n\n                            <input\n                                type=\"text\"\n                                value={scoreFilter}\n                                placeholder=\"Score Threshold\"\n                                onChange={handleScoreFilterChange}\n                                className=\"border border-gray-300 rounded-md w-24 px-2 py-1 text-sm text-gray-700 focus:border-blue-500\"\n                            />\n                        </div>\n\n                        \n                        <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n                            <div className=\"grid grid-cols-10 gap-2 text-sm\">\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Last evaluation run at:</div>\n                                    <div className=\"text-gray-700\">{new Date(last_updated).toLocaleString()}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Dataset:</div>\n                                    <div className=\"text-gray-700\">{dataset_name}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">LLM Endpoint:</div>\n                                    <div className=\"text-gray-700\">{endpoint_name}</div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Evaluation Name:</div>\n                                    <div className=\"text-blue-500\">\n                                        <Link href={`/view/simulation/${simulation_id}`}>\n                                            {simulation_name}\n                                        </Link>\n                                    </div>\n                                </div>\n                                <div className=\"col-span-2\">\n                                    <div className=\"font-bold mb-2\">Selected Sim Run Id:</div>\n                                    <div className=\"text-gray-700\">{simulation_run_id}</div>\n                                </div>\n                            </div>\n                            \n                            \n                        </div>\n                        \n                        <table className=\"w-full mt-2 border-collapse border table-auto\">\n                            <thead>\n                                <tr>\n                                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                                    <th className={tableHeaderCellStyle}>Chat Messages</th>\n                                    <th className={tableHeaderCellStyle} \n                                    onClick={toggleSortOrder}\n                                    style={{ cursor: 'pointer' }}\n                                    >\n                                        Mean Score\n                                        {sortOrder === 'asc' ? ' ▲' : ' ▼'}\n                                    </th>\n                                    <th className={tableHeaderCellStyle}>Reference Chunk</th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {qaData.map((data) => (\n                                    <Fragment key={data.id}>\n                                        {expandedReference === data.id && (\n                                            <tr className=\"border-b\">\n                                                <td colSpan={4} className={tableBodyExpandedCellStyle}>\n                                                    <div className=\"text-sm\">\n                                                        <p>\n                                                            <strong>Reference Chunk:</strong> \n                                                        </p>\n                                                        <p>\n                                                            {data.reference_chunk}\n                                                        </p>\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        )}\n                                        <tr className=\"border-b\">\n                                            <td className={tableBodyCellStyle}  style={{\"vertical-align\": \"top\"}}>\n                                                {new Date(data.timestamp).toLocaleString()}\n                                            </td>\n                                            <td className={tableBodyCellStyle}>\n                                                <ul className=\"text-left space-y-4\">\n                                                    {JSON.parse(data.chat_messages).question_answer && (\n                                                        <li className='mb-2'> \n                                                            <strong>Question:</strong> {JSON.parse(data.chat_messages).question_answer.question}\n                                                            <br/>\n                                                            <strong>Answer:</strong> {JSON.parse(data.chat_messages).question_answer.answer}\n                                                            <br/>\n                                                            <strong>LLM Endpoint Answer:</strong> {data.endpoint_response}\n                                                            <br/>\n                                                            <strong>Score: </strong>{' '}\n                                                            {data.score.toFixed(4)}\n                                                        </li>\n                                                    )}\n                                                    {JSON.parse(data.chat_messages).question_answer &&\n                                                        [...Array(3).keys()].map((index) => (\n                                                            JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`] && (\n                                                                <li key={index + 1}>\n                                                                    <strong>Follow-up Question {index + 1}: </strong>\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_question_${index + 1}`]},{' '}\n                                                                    <br/>\n                                                                    <strong>Follow-up Answer {index + 1}: </strong>{' '}\n                                                                    {JSON.parse(data.chat_messages).question_answer[`follow_up_answer_${index + 1}`]}\n                                                                    <br/>\n                                                                    <strong>LLM Endpoint Follow-up Answer {index + 1}: </strong>{' '}\n                                                                    {data.endpoint_response}\n                                                                    <br/>\n                                                                    <strong>Score: </strong>{' '}\n                                                                    {data.score.toFixed(4)}\n                                                                </li>\n                                                            )\n                                                        ))}\n                                                </ul>\n                                            </td>\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>\n                                                {calculateAverageScore(data)}\n                                            </td>\n                                            <td className={tableBodyCellStyle} style={{\"vertical-align\": \"top\"}}>\n                                                <button\n                                                    className=\"text-blue-500 underline cursor-pointer\"\n                                                    onClick={() => setExpandedReference(expandedReference === data.id ? null : data.id)}\n                                                >\n                                                    {expandedReference === data.id ? 'Collapse Reference' : 'Expand Reference'}\n                                                </button>\n                                            </td>\n                                        </tr>\n                                        \n                                    </Fragment>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ) : (\n                    <div>\n                    {!isLoading && !formSubmitted ? (\n                        <div>\n                            <p>\n                                Chat QA data evaluation is in progress for evaluation id - <span className=\"font-bold\">{evaluation_id}</span>\n                            </p>\n                            <button\n                                className=\"bg-gray-700 text-sm text-white px-4 py-2 rounded-md mt-4\"\n                                onClick={() => {\n                                    fetchEvaluationDetails();\n                                    fetchChatData();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Refresh\n                            </button>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    </div>\n                )}\n                {/* Existing code... */}\n            </div>\n        </main>\n    );\n}\n\nexport default DatasetDetails;\n","/Users/jyotirmoysundi/git/openeval-ui/pages/view/evaluation/line-chart.js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/Details.js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/pages/view/simulation/[id].js",[],[],"/Users/jyotirmoysundi/git/openeval-ui/components/DatasetList.tsx",["256"],[],"\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // You need to install axios if not already installed\nimport '../app/globals.css';\nimport Link from 'next/link';\nimport { faChevronRight, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { useAuth } from '@clerk/nextjs';\nimport { useClerk } from '@clerk/nextjs';\nimport { faCheckCircle, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction DatasetList({ searchTerm }: { searchTerm: string }) {\n    const { isLoaded, userId, sessionId, getToken } = useAuth();\n    const tableHeaderCellStyle =\n        'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider whitespace-no-wrap';\n    const tableBodyCellStyle =\n        'text-sm px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n    const [datasets, setDatasets] = useState([]);\n    const [selectedInterview, setSelectedInterview] = useState<any>(null);\n    const [userMessage, setUserMessage] =\n        useState(`No dataset found. Why not create a new dataset? Click the button\n  above to get started!`); // Message to display to the user\n    const [isLoading, setIsLoading] = useState(true);\n    const [successMessage, setSuccessMessage] = useState(0); // Message to display to the user\n    const { session } = useClerk();\n    const [orgId, setOrgId] = useState<string>('');\n\n    useEffect(() => {\n        const fetchUserData = async () => {\n            try {\n                setIsLoading(true);\n\n\n                setOrgId(session?.lastActiveOrganizationId ?? '');\n                setSuccessMessage(1);\n                if (session?.lastActiveOrganizationId) {\n                    setUserMessage(\n                        `No dataset found. Why not create a new dataset? Click the button\n            above to get started!`\n                    );\n                } else {\n                    setSuccessMessage(0);\n                    setUserMessage(\n                        'No organization found. Please create an organization first.'\n                    );\n                }\n            } catch (error) {\n                console.error('Error fetching user data:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        if (session) {\n            fetchUserData();\n        }\n    }, [session]);\n\n    useEffect(() => {\n        // Fetch interviews using Prisma\n        const fetchData = async () => {\n            try {\n                setIsLoading(true);\n                if (searchTerm.trim() !== '') {\n                    const searchResponse = await axios.get(\n                        `${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/dataset/search`, {\n                        params: {\n                            org_id: session?.lastActiveOrganizationId,\n                            user_id: userId,\n                            search: searchTerm,\n                        },\n                    });\n                    const searchResults = searchResponse.data;\n                    setDatasets(searchResults);\n                } else {\n                    // If search term is empty, use the default API route\n                    const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/dataset/list`, {\n                        params: {\n                            org_id: session?.lastActiveOrganizationId,\n                            user_id: userId,\n                        },\n                    });\n                    const fetchedInterviews = response.data;\n                    setDatasets(fetchedInterviews);\n                }\n                setIsLoading(false); // Data has been fetched\n                setSuccessMessage(1);\n            } catch (error: any) {\n                setSuccessMessage(0);\n                console.error('Error fetching:', error);\n                setIsLoading(false); // Data fetching failed\n            }\n        };\n        if (session && session?.lastActiveOrganizationId) {\n            fetchData();\n        }\n    }, [searchTerm]);\n\n    if (!session) {\n        return null;\n    }\n\n\n    const handleRowClick = (interview: any) => {\n        setSelectedInterview((prevSelectedInterview: any) => {\n            if (prevSelectedInterview && prevSelectedInterview.id === interview.id) {\n                return null; // Hide details if the same row is clicked again\n            } else {\n                return interview; // Show details for the clicked row\n            }\n        });\n    };\n\n    if (isLoading || !isLoaded || !userId || !session) {\n        // Render loading message\n        return (\n            <div\n                className=\"container min-w-full text-sm\"\n                style={{ marginTop: '16px' }}\n            >\n                Loading...\n            </div>\n        );\n    }\n    return (\n        <div className=\"container min-w-full\" style={{ marginTop: '16px' }}>\n            {datasets.length === 0 ? (\n                <div>\n                    <div className=\"text-sm\">\n                        <p>\n                            {successMessage === 1 ? (\n                                <>{userMessage}</>\n                            ) : (\n                                <div>\n                                    {userMessage}\n                                    <Link href={'/create-organization'} className=\"text-blue-500\">\n                                        {' '}\n                                        Click here to get started\n                                    </Link>\n                                </div>\n                            )}\n                        </p>\n                    </div>\n                    <div className=\"text-center mt-10\" style={{ marginTop: '32px' }}>\n                        <Link href=\"/add/dataset\">\n                            <button \n                            className=\"bg-gray-900 mt-5 text-white px-8 py-4 text-lg font-semibold rounded hover:bg-gray-700 hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-green-700 focus:ring-opacity-50\"\n                            disabled={!session}\n                            >\n                                <span className=\"relative inline-flex items-center\">\n                                    <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    fill=\"none\"\n                                    viewBox=\"0 0 24 24\"\n                                    strokeWidth=\"1.5\"\n                                    stroke=\"currentColor\"\n                                    className=\"w-4 h-4\"\n                                    >\n                                    <path\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        d=\"M12 4.5v15m7.5-7.5h-15\"\n                                    />\n                                    </svg>\n                                    &nbsp; Create Dataset\n                                </span>\n                            </button>\n                        </Link>\n                    </div>\n                </div>\n            ) : (\n                <table className=\"container min-w-full border-collapse border table-auto\" style={{ marginTop: '16px' }}>\n                    <thead>\n                        <tr>\n                            <th className={tableHeaderCellStyle}>Timestamp</th>\n                            <th className={tableHeaderCellStyle}>Name</th>\n                            {/* <th className={tableHeaderCellStyle}>NumberOfQA</th>\n                            <th className={tableHeaderCellStyle}>Sample%</th> */}\n                            <th className={tableHeaderCellStyle}>DataType</th>\n                            <th className={tableHeaderCellStyle}>ChatType</th>\n                            <th className={tableHeaderCellStyle}>ModelUsed</th>\n                            <th className={tableHeaderCellStyle}>ChunkSize</th>\n                            <th className={tableHeaderCellStyle}>Status</th>\n                            <th className={tableHeaderCellStyle}>View</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"bg-white\">\n                        {datasets.map((dataset: any) => (\n                            <React.Fragment key={dataset.id}>\n                                <tr key={dataset.id} onClick={() => handleRowClick(dataset)}>\n                                    <td className={tableBodyCellStyle}>\n                                        {new Date(dataset.ts).toLocaleString()}\n                                    </td>\n                                    <td className={tableBodyCellStyle}>{dataset.name}</td>\n                                    <td className={tableBodyCellStyle}>{dataset.dataset_type}</td>\n                                    <td className={tableBodyCellStyle}>\n                                        {dataset.qa_type ?? ''}\n                                    </td>\n                                    <td className={tableBodyCellStyle}>{dataset.model_name}</td>\n                                    <td className={tableBodyCellStyle}>{dataset.chunk_size ?? 2000}</td>\n                                    <td className={tableBodyCellStyle}>\n                                        {dataset.status === 'completed' && <FontAwesomeIcon icon={faCheckCircle} style={{ color: 'green' }} />}\n                                        {dataset.status === 'in_progress' && <FontAwesomeIcon icon={faSpinner} spin style={{ color: 'blue' }} />}\n                                        {dataset.status === 'error' && <FontAwesomeIcon icon={faTimesCircle} style={{ color: 'red' }} />}\n                                        {(!dataset.status || dataset.status === \"\") && \"\"}\n                                    </td>\n                                    <td className={tableBodyCellStyle}>\n                                        <Link href={`/view/datasets/${dataset.id}`} rel=\"noopener noreferrer\">\n                                            <FontAwesomeIcon\n                                                icon={faChevronRight}\n                                                className=\"text-sm text-gray-900 hover:text-blue-500\"\n                                            />\n                                        </Link>\n                                    </td>\n                                </tr>\n                                {/* Details row */}\n                                {selectedInterview &&\n                                    selectedInterview.id === dataset.id && (\n                                        <tr>\n                                            <td colSpan={9} className=\"px-4 py-2\">\n                                                <div className=\"text-sm\">\n                                                    <p>\n                                                        <strong>Persona:</strong> {dataset.persona}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Demographic Group:</strong> {dataset.demographic}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Sentiment</strong> {dataset.sentiment}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Behavior:</strong> {dataset.behavior}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Resdient:</strong> {dataset.resident_type}\n                                                    </p>\n                                                    <p>\n                                                        <strong>Family Status:</strong> {dataset.family_status}\n                                                    </p>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                    )}\n                            </React.Fragment>\n                        ))}\n                    </tbody>\n                </table>\n\n            )}\n        </div>\n    );\n}\n\nexport default DatasetList;\n","/Users/jyotirmoysundi/git/openeval-ui/components/EndpointList.tsx",["257"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // You need to install axios if not already installed\nimport '../app/globals.css';\nimport Link from 'next/link';\nimport { faChevronRight, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { useAuth } from '@clerk/nextjs';\nimport { useClerk } from '@clerk/nextjs';\n\nfunction EndpointList({ searchTerm }: { searchTerm: string }) {\n  const { isLoaded, userId, sessionId, getToken } = useAuth();\n  const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n  const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n  const [endpoints, setDatasets] = useState([]);\n  const [selectedInterview, setSelectedInterview] = useState<any>(null);\n  const [userMessage, setUserMessage] =\n    useState(`No dataset found. Why not create a new dataset? Click the button\n  above to get started!`); // Message to display to the user\n  const [isLoading, setIsLoading] = useState(true);\n  const [successMessage, setSuccessMessage] = useState(0); // Message to display to the user\n  const { session } = useClerk();\n  const [orgId, setOrgId] = useState<string>('');\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setIsLoading(true);\n\n        \n        setOrgId(session?.lastActiveOrganizationId ?? '');\n        setSuccessMessage(1);\n        if (session?.lastActiveOrganizationId) {\n          setUserMessage(\n            `No llm endpoint found. Why not create a new one ? Click the button\n            above to get started!`\n          );\n        } else {\n            setSuccessMessage(0);\n            setUserMessage(\n                'No organization found. Please create an organization first.'\n            );\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (session) {\n      fetchUserData();\n    }\n  }, [session]);\n\n  useEffect(() => {\n    // Fetch interviews using Prisma\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        if (searchTerm.trim() !== '') {\n          const searchResponse = await axios.get(\n            `${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/llm-endpoints/search`,{\n                params: {\n                    org_id: session?.lastActiveOrganizationId,\n                    search: searchTerm,\n                },\n            });\n          const searchResults = searchResponse.data;\n          setDatasets(searchResults);\n        } else {\n          const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/llm-endpoints/list`, {\n            params: {\n                org_id: session?.lastActiveOrganizationId,\n            },\n          });\n          const fetchedInterviews = response.data;\n          setDatasets(fetchedInterviews);\n        }\n        setIsLoading(false); // Data has been fetched\n        setSuccessMessage(1);\n      } catch (error: any) {        \n        setSuccessMessage(0);\n        console.error('Error fetching:', error);\n        setIsLoading(false); // Data fetching failed\n      }\n    };\n    if(session && session?.lastActiveOrganizationId) {\n        fetchData();\n    }\n  }, [searchTerm]);\n\n  if (!session) {\n    return null;\n  }\n\n\n  const handleRowClick = (interview: any) => {\n    setSelectedInterview((prevSelectedInterview: any) => {\n      if (prevSelectedInterview && prevSelectedInterview.id === interview.id) {\n        return null; // Hide details if the same row is clicked again\n      } else {\n        return interview; // Show details for the clicked row\n      }\n    });\n  };\n\n  if (isLoading || !isLoaded || !userId || !session) {\n    // Render loading message\n    return (\n      <div\n        className=\"container min-w-full text-sm\"\n        style={{ marginTop: '16px' }}\n      >\n        Loading...\n      </div>\n    );\n  }\n  return (\n    <div className=\"container min-w-full\" style={{ marginTop: '16px' }}>\n      {endpoints.length === 0 ? (\n        <div>\n            <div className=\"text-sm\">\n            <p>\n                {successMessage === 1 ? (\n                <>{userMessage}</>\n                ) : (\n                <div>\n                    {userMessage}\n                    <Link href={'/create-organization'} className=\"text-blue-500\">\n                    {' '}\n                    Click here to get started\n                    </Link>\n                </div>\n                )}\n            </p>\n            </div>\n            <div className=\"text-center mt-10\" style={{ marginTop: '32px' }}>\n                <Link href=\"/add/endpoint\">\n                    <button \n                    className=\"bg-gray-900 mt-5 text-white px-8 py-4 text-lg font-semibold rounded hover:bg-gray-700 hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-green-700 focus:ring-opacity-50\"\n                    disabled={!session}\n                    >\n                        <span className=\"relative inline-flex items-center\">\n                            <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            strokeWidth=\"1.5\"\n                            stroke=\"currentColor\"\n                            className=\"w-4 h-4\"\n                            >\n                            <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                d=\"M12 4.5v15m7.5-7.5h-15\"\n                            />\n                            </svg>\n                            &nbsp; Create Endpoint\n                        </span>\n                    </button>\n                </Link>\n            </div>\n        </div>\n      ) : (\n        <table className=\"container min-w-full border-collapse border table-auto\" style={{ marginTop: '16px' }}>\n            <thead>\n                <tr>\n                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                    <th className={tableHeaderCellStyle}>Name</th>\n                    <th className={tableHeaderCellStyle}>API Endpoint</th>\n                    <th className={tableHeaderCellStyle}>Requests / Minute</th>\n                    <th className={tableHeaderCellStyle}>Requests Payload</th>\n                    <th className={tableHeaderCellStyle}>View</th>\n                </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n                {endpoints.map((endpoint:any) => (\n                <React.Fragment key={endpoint.id}>\n                    <tr key={endpoint.id} onClick={() => handleRowClick(endpoint)}>\n                        <td className={tableBodyCellStyle}>\n                            {new Date(endpoint.ts).toLocaleString()}\n                        </td>\n                        <td className={tableBodyCellStyle}>{endpoint.name}</td>\n                        <td className={tableBodyCellStyle}>{endpoint.endpoint_url}</td>\n                        <td className={tableBodyCellStyle}>{endpoint.requests_per_minute}</td>\n                        <td className={tableBodyCellStyle}>\n                            {\n                                JSON.stringify({\n                                    [endpoint.payload_user_key]: 'user_id',\n                                    [endpoint.payload_message_key]: 'user_chat',\n                                })\n                            }\n                        </td>\n                        \n                        <td className={tableBodyCellStyle}>\n                            <Link href={`/view/endpoints/${endpoint.id}`} rel=\"noopener noreferrer\">\n                            <FontAwesomeIcon\n                                icon={faChevronRight}\n                                className=\"text-sm text-gray-900 hover:text-blue-500\"\n                            />\n                            </Link>\n                        </td>\n                    </tr>\n                    {selectedInterview &&\n                    selectedInterview.id === endpoint.id && (\n                    <tr>\n                        \n                    </tr>\n                    )}\n                </React.Fragment>\n                ))}\n            </tbody>\n            </table>\n\n      )}\n    </div>\n  );\n}\n\nexport default EndpointList;\n","/Users/jyotirmoysundi/git/openeval-ui/components/EvaluationList.tsx",["258"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // You need to install axios if not already installed\nimport '../app/globals.css';\nimport Link from 'next/link';\nimport { faChevronRight, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { useAuth } from '@clerk/nextjs';\nimport { useClerk } from '@clerk/nextjs';\nimport { faCheckCircle, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction EvaluationList({ searchTerm }: { searchTerm: string }) {\n  const { isLoaded, userId, sessionId, getToken } = useAuth();\n  const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n  const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n  const [evaluations, setEvaluations] = useState([]);\n  const [selectedInterview, setSelectedInterview] = useState<any>(null);\n  const [userMessage, setUserMessage] =\n    useState(`No dataset found. Why not create a new dataset? Click the button\n  above to get started!`); // Message to display to the user\n  const [isLoading, setIsLoading] = useState(true);\n  const [successMessage, setSuccessMessage] = useState(0); // Message to display to the user\n  const { session } = useClerk();\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setIsLoading(true);\n\n        setSuccessMessage(1);\n        if (session?.lastActiveOrganizationId) {\n          setUserMessage(\n            `No llm/rag evaluations found. Why not create a new one ? Add a simiulation to get started in chat simulator`\n          );\n        } else {\n            setSuccessMessage(0);\n            setUserMessage(\n                'No organization found. Please create an organization first.'\n            );\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (session) {\n      fetchUserData();\n    }\n  }, [session]);\n\n  useEffect(() => {\n    // Fetch interviews using Prisma\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        if (searchTerm.trim() !== '') {\n          const searchResponse = await axios.get(\n            `${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/search`,{\n                params: {\n                    org_id: session?.lastActiveOrganizationId,\n                    user_id: userId,\n                    search: searchTerm,\n                },\n            });\n          setEvaluations(searchResponse.data);\n        } else {\n          const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/evaluation/list`, {\n            params: {\n                user_id: userId,\n                org_id: session?.lastActiveOrganizationId,\n            },\n          });\n          setEvaluations(response.data);\n        }\n        setIsLoading(false); // Data has been fetched\n        setSuccessMessage(1);\n      } catch (error: any) {\n        \n        setSuccessMessage(0);\n        console.error('Error fetching:', error);\n        setIsLoading(false); // Data fetching failed\n      }\n    };\n    if(session && session?.lastActiveOrganizationId) {\n        fetchData();\n    }\n  }, [searchTerm]);\n\n  if (!session) {\n    return null;\n  }\n\n\n  const handleRowClick = (interview: any) => {\n    setSelectedInterview((prevSelectedInterview: any) => {\n      if (prevSelectedInterview && prevSelectedInterview.id === interview.id) {\n        return null; // Hide details if the same row is clicked again\n      } else {\n        return interview; // Show details for the clicked row\n      }\n    });\n  };\n\n  if (isLoading || !isLoaded || !userId || !session) {\n    // Render loading message\n    return (\n      <div\n        className=\"container min-w-full text-sm\"\n        style={{ marginTop: '16px' }}\n      >\n        Loading...\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container min-w-full\" style={{ marginTop: '16px' }}>\n      {evaluations.length === 0 ? (\n        <div className=\"text-sm\">\n          <p>\n            {successMessage === 1 ? (\n              <>{userMessage}</>\n            ) : (\n              <div>\n                {userMessage}\n                <Link href={'/create-organization'} className=\"text-blue-500\">\n                  {' '}\n                  Click here to get started\n                </Link>\n              </div>\n            )}\n          </p>\n        </div>\n      ) : (\n        <table className=\"container min-w-full border-collapse border table-auto\" style={{ marginTop: '16px' }}>\n            <thead>\n                <tr>\n                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                    <th className={tableHeaderCellStyle}>Id</th>\n                    <th className={tableHeaderCellStyle}>Score</th>\n                    <th className={tableHeaderCellStyle}>Evaluation</th>\n                    <th className={tableHeaderCellStyle}>Dataset</th>\n                    <th className={tableHeaderCellStyle}>Endpoint</th>\n                    <th className={tableHeaderCellStyle}>Status</th>\n                    <th className={tableHeaderCellStyle}>View</th>\n                </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n                {evaluations.map((evaluation:any) => (\n                <React.Fragment key={`${evaluation.simulation_id}-${evaluation.last_updated}`}>\n                    <tr key={`${evaluation.id}-${evaluation.last_updated}`} onClick={() => handleRowClick(evaluation)}>\n\n                        <td className={tableBodyCellStyle}>{new Date(evaluation.last_updated).toLocaleString()}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.evaluation_id}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.average_score.toFixed(4)}</td>\n                        {/* <td className={tableBodyCellStyle}>\n                            {dataset.status === 'completed' && <FontAwesomeIcon icon={faCheckCircle} />}\n                            {dataset.status === 'in_progress' && <FontAwesomeIcon icon={faSpinner} spin />}\n                            {dataset.status === 'error' && <FontAwesomeIcon icon={faTimesCircle} />}\n                            {(!dataset.status || dataset.status === \"\") && \"\"}\n                        </td> */}\n                        <td className={tableBodyCellStyle}>{evaluation.simulation_name}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.dataset_name}</td>\n                        <td className={tableBodyCellStyle}>{evaluation.endpoint_name}</td>\n                        <td className={tableBodyCellStyle}>\n                            {evaluation.status === 'completed' && <FontAwesomeIcon icon={faCheckCircle} style={{ color: 'green' }} />}\n                            {evaluation.status === 'in_progress' && <FontAwesomeIcon icon={faSpinner} spin style={{ color: 'blue' }} />}\n                            {evaluation.status === 'error' && <FontAwesomeIcon icon={faTimesCircle} style={{ color: 'red' }} />}\n                            {(!evaluation.status || evaluation.status === \"\") && \"\"}\n                        </td>\n                        <td className={tableBodyCellStyle}>\n                            <Link href={`/view/evaluation/${evaluation.evaluation_id}`} rel=\"noopener noreferrer\">\n                            <FontAwesomeIcon\n                                icon={faChevronRight}\n                                className=\"text-sm text-gray-900 hover:text-blue-500\"\n                            />\n                            </Link>\n                        </td>\n                    </tr>\n                    {/* Details row */}\n                    {selectedInterview &&\n                    selectedInterview.id === evaluation.id && (\n                      <tr>\n                        <td colSpan={6} className={tableBodyCellStyle}>\n                          {/* Display additional details based on the selected interview */}\n                          <div>\n                            <strong>Simulation ID:</strong> {evaluation.simulation_id}\n                          </div>\n                          <div>\n                            <strong>Average Score:</strong> {evaluation.average_score}\n                          </div>\n                          <div>\n                            <strong>Dataset Name:</strong> {evaluation.dataset_name}\n                          </div>\n                          <div>\n                            <strong>Endpoint Name:</strong> {evaluation.endpoint_name}\n                          </div>\n                          <div>\n                            <strong>Simulation Name:</strong> {evaluation.simulation_name}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                </React.Fragment>\n                ))}\n            </tbody>\n            </table>\n      )}\n    </div>\n  );\n}\n\nexport default EvaluationList;\n","/Users/jyotirmoysundi/git/openeval-ui/components/SimulationList.tsx",["259"],[],"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // You need to install axios if not already installed\nimport '../app/globals.css';\nimport Link from 'next/link';\nimport { faChevronRight, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { useAuth } from '@clerk/nextjs';\nimport { useClerk } from '@clerk/nextjs';\nimport { faCheckCircle, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction SimulationList({ searchTerm }: { searchTerm: string }) {\n  const { isLoaded, userId, sessionId, getToken } = useAuth();\n  const tableHeaderCellStyle =\n    'px-4 py-2 leading-5 text-center bg-gray-50 text-sm text-gray-900 tracking-wider';\n  const tableBodyCellStyle =\n    'px-6 py-4 leading-5 text-center bg-white text-sm text-gray-900 tracking-wider whitespace-no-wrap leading-5';\n\n  const [simulations, setSimulations] = useState([]);\n  const [selectedSimulation, setSelectedSimulation] = useState<any>(null);\n  const [userMessage, setUserMessage] =\n    useState(`No dataset found. Why not create a new dataset? Click the button\n  above to get started!`); // Message to display to the user\n  const [isLoading, setIsLoading] = useState(true);\n  const [successMessage, setSuccessMessage] = useState(0); // Message to display to the user\n  const { session } = useClerk();\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setIsLoading(true);\n\n        setSuccessMessage(1);\n        if (session?.lastActiveOrganizationId) {\n          setUserMessage(\n            `No evaluations found. Why not create a new one ? Add a evaluation to get started in above button`\n          );\n        } else {\n            setSuccessMessage(0);\n            setUserMessage(\n                'No organization found. Please create an organization first.'\n            );\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (session) {\n      fetchUserData();\n    }\n  }, [session]);\n\n  useEffect(() => {\n    // Fetch interviews using Prisma\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        if (searchTerm.trim() !== '') {\n          const searchResponse = await axios.get(\n            `${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/simulation/search`,{\n                params: {\n                    org_id: session?.lastActiveOrganizationId,\n                    user_id: userId,\n                    search: searchTerm,\n                    skip: 0,\n                    limit: 100,\n                },\n            });\n          setSimulations(searchResponse.data);\n        } else {\n          const response = await axios.get(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/simulation/list`, {\n            params: {\n                user_id: userId,\n                org_id: session?.lastActiveOrganizationId,\n                skip: 0,\n                limit: 100,\n            },\n          });\n          setSimulations(response.data);\n        }\n        setIsLoading(false); // Data has been fetched\n        setSuccessMessage(1);\n      } catch (error: any) {\n        \n        setSuccessMessage(0);\n        console.error('Error fetching:', error);\n        setIsLoading(false); // Data fetching failed\n      }\n    };\n    if(session && session?.lastActiveOrganizationId) {\n        fetchData();\n    }\n  }, [searchTerm]);\n\n  if (!session) {\n    return null;\n  }\n\n\n  const handleRowClick = (interview: any) => {\n    setSelectedSimulation((prevSelectedInterview: any) => {\n      if (prevSelectedInterview && prevSelectedInterview.id === interview.id) {\n        return null; // Hide details if the same row is clicked again\n      } else {\n        return interview; // Show details for the clicked row\n      }\n    });\n  };\n\n  if (isLoading || !isLoaded || !userId || !session) {\n    // Render loading message\n    return (\n      <div\n        className=\"container min-w-full text-sm\"\n        style={{ marginTop: '16px' }}\n      >\n        Loading...\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container min-w-full\" style={{ marginTop: '16px' }}>\n      {simulations.length === 0 ? (\n        <div>\n            <div className=\"text-sm\">\n                <p>\n                    {successMessage === 1 ? (\n                    <>{userMessage}</>\n                    ) : (\n                    <div>\n                        {userMessage}\n                        <Link href={'/create-organization'} className=\"text-blue-500\">\n                        {' '}\n                        Click here to get started\n                        </Link>\n                    </div>\n                    )}\n                </p>\n            </div>\n\n            <div className=\"text-center mt-10\" style={{ marginTop: '32px' }}>\n                <Link href=\"/add/simulator\">\n                    <button \n                    className=\"bg-gray-900 mt-5 text-white px-8 py-4 text-lg font-semibold rounded hover:bg-gray-700 hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-green-700 focus:ring-opacity-50\"\n                    disabled={!session}\n                    >\n                        <span className=\"relative inline-flex items-center\">\n                            <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            strokeWidth=\"1.5\"\n                            stroke=\"currentColor\"\n                            className=\"w-4 h-4\"\n                            >\n                            <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                d=\"M12 4.5v15m7.5-7.5h-15\"\n                            />\n                            </svg>\n                            &nbsp; Create Evaluation\n                        </span>\n                    </button>\n                </Link>\n            </div>\n        </div>\n\n\n      ) : (\n        <table className=\"container min-w-full border-collapse border table-auto\" style={{ marginTop: '16px' }}>\n            <thead>\n                <tr>\n                    <th className={tableHeaderCellStyle}>Timestamp</th>\n                    <th className={tableHeaderCellStyle}>Evaluation Id</th>\n                    <th className={tableHeaderCellStyle}>Evaluation Name</th>\n                    <th className={tableHeaderCellStyle}>Number of Users</th>\n                    <th className={tableHeaderCellStyle}>Dataset</th>\n                    <th className={tableHeaderCellStyle}>Endpoint</th>\n                    <th className={tableHeaderCellStyle}>Status</th>\n                    <th className={tableHeaderCellStyle}>View</th>\n                </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n                {simulations.map((simulation:any) => (\n                <React.Fragment key={`${simulation.ts}-${simulation.simulation_id}`}>\n                    <tr key={`${simulation.ts}-${simulation.simulation_id}`} onClick={() => handleRowClick(simulation)}>\n\n                        <td className={tableBodyCellStyle}>{new Date(simulation.ts).toLocaleString()}</td>\n                        <td className={tableBodyCellStyle}>{simulation.id}</td>\n                        <td className={tableBodyCellStyle}>{simulation.name}</td>\n                        <td className={tableBodyCellStyle}>{simulation.num_users}</td>\n                        <td className={tableBodyCellStyle}>\n                            <Link href={`/view/datasets/${simulation.dataset_id}`} rel=\"noopener noreferrer\">\n                                <span className=\"relative text-blue-500 inline-flex items-center\">\n                                    {simulation.dataset_id}\n                                </span>\n                            </Link>\n                        </td>\n                        <td className={tableBodyCellStyle}>\n                            <Link href={`/view/endpoints/${simulation.endpoint_url_id}`} rel=\"noopener noreferrer\">\n                                <span className=\"relative text-blue-500 inline-flex items-center\">\n                                    {simulation.endpoint_url_id}\n                                </span>\n                            </Link>\n                        </td>\n                        <td className={tableBodyCellStyle}>\n                            {simulation.status === 'completed' && <FontAwesomeIcon icon={faCheckCircle} style={{ color: 'green' }} />}\n                            {simulation.status === 'in_progress' && <FontAwesomeIcon icon={faSpinner} spin style={{ color: 'blue' }} />}\n                            {simulation.status === 'error' && <FontAwesomeIcon icon={faTimesCircle} style={{ color: 'red' }} />}\n                            {(!simulation.status || simulation.status === \"\") && \"\"}\n                        </td>\n                        <td className={tableBodyCellStyle}>\n                            <Link href={`/view/simulation/${simulation.id}`} rel=\"noopener noreferrer\">\n                            <FontAwesomeIcon\n                                icon={faChevronRight}\n                                className=\"text-sm text-gray-900 hover:text-blue-500\"\n                            />\n                            </Link>\n                        </td>\n                    </tr>\n                    {/* Details row */}\n                    {selectedSimulation &&\n                    selectedSimulation.id === simulation.id && (\n                      <tr>\n                        <td colSpan={6} className={tableBodyCellStyle}>\n                          {/* Display additional details based on the selected interview */}\n                          <div>\n                            <strong>Evaluation ID:</strong> {simulation.simulation_id}\n                          </div>\n                          <div>\n                            <strong>Average Score:</strong> {simulation.average_score}\n                          </div>\n                          <div>\n                            <strong>Dataset Name:</strong> {simulation.dataset_name}\n                          </div>\n                          <div>\n                            <strong>Endpoint Name:</strong> {simulation.endpoint_name}\n                          </div>\n                          <div>\n                            <strong>Evaluation Name:</strong> {simulation.simulation_name}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                </React.Fragment>\n                ))}\n            </tbody>\n            </table>\n      )}\n    </div>\n  );\n}\n\nexport default SimulationList;\n","/Users/jyotirmoysundi/git/openeval-ui/components/dataset-form.tsx",["260"],[],"import React, { useState, ChangeEvent, useEffect, use } from 'react';\nimport '../app/globals.css';\nimport axios from 'axios';\nimport Link from 'next/link';\nimport { useClerk } from '@clerk/nextjs';\nimport { useAuth } from '@clerk/nextjs';\nimport { Button } from '@tremor/react';\nimport Details from '../pages/view/datasets/Details';\n\nconst generateRandomName = () => {\n  const nouns = ['Explorer', 'Adventurer', 'Pioneer', 'Dreamer', 'Voyager', 'Traveler', 'Nomad', 'Seeker', 'Wanderer', 'Discoverer'];\n  const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\n  return `Test Dataset ${randomNoun}`;\n};\n\nexport default function DatasetForm() {\n  const [name, setName] = useState(generateRandomName());\n  const [dataSource, setDataSource] = useState('');\n  const [webLink, setWebLink] = useState('');\n  const [apiKey, setApiKey] = useState('');\n  const [crawlDepth, setCrawlDepth] = useState(1);\n  const [maxCrawlLinks, setMaxCrawlLinks] = useState(1);\n  const [datasetType, setDatasetType] = useState('TXT');\n  const [apiEndpoint, setApiEndpoint] = useState('');\n  const [files, setFiles] = useState<File[]>([]); // Use File[] for multiple files\n  const [sampleSize, setSampleSize] = useState<number | 5>(5);\n  const [numberOfQuestions, setNumberOfQuestions] = useState<number | 5>(5);\n  const [dataTypeExtension, setDataTypeExtension] = useState<string>('');\n  const [csvOptions, setCsvOptions] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [generatedDatasetId, setGeneratedDatasetId] = useState<string>('');\n  const { isLoaded, userId, sessionId, getToken } = useAuth();\n  const { session } = useClerk();\n  const [orgId, setOrgId] = useState<string>('');\n  const [modelName, setModelName] = useState<string>('gpt-3.5-turbo');\n  const [chunkSize, setChunkSize] = useState<number | 2000>(2000);\n  const [errorMsg, setErrorMsg] = useState<string>('');\n  const [datasetGenerationType, setDatasetGenerationType] = useState('simple');\n  const [personaFlag, setPersonaFlag] = useState<string>('casual');\n  const [behaviorFlag, setBehaviorFlag] = useState<string>('Friendly');\n  const [demoFlag, setDemoFlag] = useState<string>('adults (age 25-34)');\n  const [sentimentFlag, setSentimentFlag] = useState<string>('positive');\n  const [errorFlag, setErrorFlag] = useState<string>('normal');\n  const [residentType, setResidentType] = useState<string>('Urban');\n  const [familyStatus, setFamilyStatus] = useState<string>('Single');\n  const [persona, setPersona] = useState<string>('');\n  const [placeholder, setPlaceholder] = useState<string>('');\n  const [tags, setTags] = useState<string>('');\n\n  const personaSentences = [\n    \"Users who are always ahead in tech trends, this coder spends nights crafting innovative software and exploring new programming languages.\",\n    \"Users with a passion for creativity, this artist blends traditional techniques with modern expressions to create captivating artworks.\",\n    \"Users who are always on the go, this traveler is constantly exploring new places and cultures, and is always looking for the next adventure.\",\n    \"Eager to disrupt markets, they blend academic insights from commerce classes with cutting-edge marketing trends.\",\n    \"User who are casual and friendly, they are always looking for new ways to connect with their friends and family.\",\n    \"Users who are friendly and outgoing, they are always looking for new ways to buy and sell products.\",\n    \"Users who are exploring commerce's complexities, they aspire to master the art of successful business management.\",\n    \"Users who are tech savvy and software engineers, they are always looking for new ways to build and deploy software.\",\n  ];\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setOrgId(session?.lastActiveOrganizationId ?? '');\n        const randomIndex = Math.floor(Math.random() * personaSentences.length);\n        //setPersona(personaSentences[randomIndex]);\n        setPlaceholder(personaSentences[randomIndex]);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    if (session) {\n      fetchUserData();\n    }\n  }, [session]);\n\n  useEffect(() => {\n\n  }, [generatedDatasetId]);\n\n  if (!session) {\n    return null;\n  }\n\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      setErrorMsg('');\n      setIsLoading(true);\n      setFormSubmitted(true);\n      setSuccessMessage('');\n      if (name.trim() === '') {\n        // Show an error message or perform other actions as needed\n        setErrorMsg('Name is required');\n        return;\n      }\n      if (datasetType.trim() === '') {\n        // Show an error message or perform other actions as needed\n        setErrorMsg('Dataset Type is required');\n        return;\n      }\n      if (dataSource.trim() === '') {\n        // Show an error message or perform other actions as needed\n        setErrorMsg('Data Source is required');\n        return;\n      }\n      \n      if (files.length === 0 && datasetType === 'TXT' ||\n        files.length === 0 && datasetType === 'CSV' ||\n        files.length === 0 && datasetType === 'PDF' ||\n        files.length === 0 && datasetType === 'JSON'\n      ) {\n        setErrorMsg('File is required');\n        return;\n      }\n\n      if (persona.trim() === '') {\n        // Show an error message or perform other actions as needed\n        setErrorMsg('User Persona is required');\n        return;\n      }\n\n      const formData = new FormData();\n\n      // For multiple files\n      for (let i = 0; i < files.length; i++) {\n        formData.append('files', files[i]);\n      }\n      formData.append('number_of_questions', numberOfQuestions.toString());\n      formData.append('sample_size', sampleSize.toString());\n      formData.append('prompt_key', `prompt_key_${datasetType.toLowerCase()}_${datasetGenerationType.toLowerCase()}`);\n      formData.append('name', name);\n      formData.append('data_source', dataSource);\n      formData.append('userId', userId ?? '');\n      formData.append('orgId', orgId ?? '');\n      formData.append('model_name', modelName);\n      formData.append('dataset_type', datasetType);\n      formData.append('chunk_size', chunkSize.toString());\n      formData.append('persona', persona);\n      formData.append('tags', tags);\n      if (apiKey.trim() !== '') {\n        formData.append('openai_api_key', apiKey);\n      }\n\n      if (datasetType === 'WEB_LINK') {\n        formData.append('data_path', webLink);\n        formData.append('crawl_depth', crawlDepth.toString());\n        formData.append('max_crawl_links', maxCrawlLinks.toString());\n        formData.append('prompt_key', `prompt_key_txt_${datasetGenerationType.toLowerCase()}`);\n        formData.append('llm_type', '.html');        \n      } else {\n        formData.append('llm_type', '.' + datasetType.toLowerCase());\n      }\n\n      // Send POST request to the API\n      const response = await axios.post(`${process.env.NEXT_PUBLIC_RAGEVAL_BACKEND_URL}/api/generate`, formData);\n\n      if (response.status === 200) {\n        // Handle success\n        console.log('Success:', response.data.message);\n        setSuccessMessage(\"Great, Your dataset creation is in process! Watch the progress\");\n        if (response.data.dataset_id) {\n          setGeneratedDatasetId(response.data.dataset_id);\n        } else {\n          setGeneratedDatasetId('');\n          setSuccessMessage('');\n          setError(\"Oops, please try again once more!\");\n        }\n        \n      } else {\n\n        console.error('Error submitting form:', response.statusText);\n        setError(response.statusText);\n        // Handle error (e.g., display error message to the user)\n      }\n    } catch (error) {\n      console.error('Unexpected error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const fileList = Array.from(e.target.files); // Convert FileList to array\n      setFiles(fileList);\n    }\n  };\n\n\n  return (\n\n    <main className={`p-4 md:p-10 mx-auto max-w-7xl`}>\n\n    <div>\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n        <form\n          onSubmit={handleSubmit}\n          className=\"bg-white-100 rounded-md px-8 pt-6 pb-8 mb-4\"\n          style={{\n            maxHeight: '80vh',\n            overflowY: 'auto',\n            display: 'flex', // Enable flexbox\n            flexDirection: 'column', // Stack children vertically\n            justifyContent: 'space-between' // Center vertically\n          }}\n        >\n          <div className=\"mb-4 flex flex-wrap\">\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Name:</label>\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full border rounded p-2 text-sm font-medium text-gray-700\"\n                required\n              />\n            </div>\n\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Data Source:</label>\n              <input\n                type=\"text\"\n                value={dataSource}\n                onChange={(e) => setDataSource(e.target.value)}\n                placeholder='Enter your own data source name'\n                className=\"w-full border rounded p-2 text-sm font-medium text-gray-700\"\n                required\n              />\n            </div>\n\n          </div>\n\n          <div className=\"mb-4 flex flex-wrap\">\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Select Dataset Type:</label>\n              <select\n                value={datasetType}\n                onChange={(e) => setDatasetType(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n                required\n              >\n                <option value=\"\">Select a Dataset type</option>\n                <option value=\"TXT\">TXT</option>\n                <option value=\"CSV\">CSV</option>\n                <option value=\"PDF\">PDF</option>\n                <option value=\"JSON\">JSON</option>\n                <option value=\"WEB_LINK\">HTML LINK</option>\n                <option value=\"PGSQL\">PGSQL</option>\n                <option value=\"MYSQL\">MYSQL</option>\n                <option value=\"API\">API</option>\n\n                {/* Add more dataset types as needed */}\n              </select>\n            </div>\n            <div className=\"w-1/2 pr-2\">\n              \n              <div className=\"pr-4\">\n                <label className=\"block text-gray-700 text-sm font-bold mb-2\">Select Question Answer Type:</label>\n                <select\n                  value={datasetGenerationType}\n                  onChange={(e) => setDatasetGenerationType(e.target.value)}\n                  className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n                  required\n                >\n                  <option value=\"\">Select a QA Generation type</option>\n                  <option value=\"simple\">Single Q&A</option>\n                  <option value=\"stateful_contextual_multilevel\">Multi-level Q&A with Contextual Follow-up</option>\n                  <option value=\"stateful_context_change_multilevel_multichunk\">Multi-level Q&A Context Change Questions</option>\n                  <option value=\"stateful_contextual_multi_chunk_reference\">Multi-level Q&A with Cross Chunk Reference[Coming Soon]</option>\n\n                </select>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mb-4 flex flex-wrap\">\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Select Model Type:</label>\n              <select\n                value={modelName}\n                onChange={(e) => setModelName(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n                required\n              >\n                <option value=\"\">Select a Model type</option>\n                <option value=\"gpt-3.5-turbo\">gpt-3.5-turbo [openai]</option>\n                <option value=\"gpt-3.5-turbo-1106\">gpt-3.5-turbo-1106-16k [openai]</option>\n                <option value=\"gpt-4\">gpt-4 [openai]</option>\n                <option value=\"llama-2\">llama-2 [Coming Soon]</option>\n                <option value=\"mistral\">mistral [Coming Soon]</option>\n                <option value=\"gemini\">gemini [Coming Soon]</option>\n              \n              </select>\n            </div>\n\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n                Your OpenAI API Key:\n                (<Link href=\"https://platform.openai.com/api-keys\" target=\"_blank\">\n                &nbsp;\n                <span className=\"underline text-sm font-normal\">Where do I find my API key?</span>\n              </Link>)\n              </label>\n              \n              <input\n                type=\"password\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                placeholder='Enter your own API key'\n                className=\"w-full border rounded p-2 text-sm font-medium text-gray-700\"\n                required\n              />\n            </div>\n          </div>\n          \n          {(datasetType === 'CSV' || datasetType === 'PDF' || datasetType === 'TXT' || datasetType === 'JSON') && (\n\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Select Data:</label>\n              <input\n                type=\"file\"\n                onChange={handleFileChange}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 cursor-pointer focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 hover:bg-gray-50 sm:text-base\"\n                multiple // Allow multiple file selection\n                required\n              />\n            </div>\n          )}\n\n\n          {(datasetType === 'CSV' || datasetType === 'PDF' || datasetType === 'TXT' || datasetType === 'JSON') && files.length > 0 && (\n            <div className=\"mb-4\">\n              <p className=\"text-gray-700 font-bold mb-2\">Selected Files:</p>\n              <ul>\n                {files.map((file, index) => (\n                  <li key={index}>{file.name}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {datasetType === 'WEB_LINK' && (\n\n            <div className=\"mb-4 flex flex-wrap mt-2\">\n              <div className=\"w-1/2 pr-2\">\n                <label className=\"block text-gray-700 text-sm font-bold mb-2\">Web Link:</label>\n                <input\n                  type=\"text\"\n                  value={webLink}\n                  onChange={(e) => setWebLink(e.target.value)}\n                  className=\"w-full border rounded p-2\"\n                  required\n                />\n\n              </div>\n              <div className=\"w-1/4 pr-2\">\n                <label className=\"block text-gray-700 text-sm font-bold mb-2\">Web Crawl Depth:</label>\n                <input\n                  type=\"number\"\n                  value={crawlDepth}\n                  onChange={(e) => setCrawlDepth(Number(e.target.value))}\n                  className=\"w-full border rounded p-2\"\n                  required\n                />\n              </div>\n\n              <div className=\"w-1/3 pr-2\">\n                <label className=\"block text-gray-700 text-sm font-bold mb-2\">Max Links to Crawl:</label>\n                <input\n                  type=\"number\"\n                  value={maxCrawlLinks}\n                  onChange={(e) => setMaxCrawlLinks(Number(e.target.value))}\n                  className=\"w-full border rounded p-2\"\n                  required\n                />\n              </div>\n            </div>\n          )}\n\n          {datasetType === 'API' && (\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">API Endpoint:</label>\n              <input\n                type=\"link\"\n                value={apiEndpoint}\n                onChange={(e) => setApiEndpoint(e.target.value)}\n                className=\"w-full border rounded p-2\"\n                required\n              />\n            </div>\n          )}\n\n          {datasetType === 'API' && (\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">API Endpoint:</label>\n              <input\n                type=\"link\"\n                value={apiEndpoint}\n                onChange={(e) => setApiEndpoint(e.target.value)}\n                className=\"w-full border rounded p-2\"\n                required\n              />\n            </div>\n          )}\n\n          \n{/* \n          <div className=\"mb-4 flex flex-wrap\">\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Persona Profile:</label>\n              <select\n                value={personaFlag}\n                onChange={(e) => setPersonaFlag(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n              >\n                <option value=\"Curious User\">Select a Persona Profile</option>\n                <option value=\"curious\">Curious User</option>\n                <option value=\"casual\">Casual User</option>\n                <option value=\"enthusiast\">Enthusiast User</option>\n                <option value=\"tech-savvy\">Tech-Savvy User</option>\n                <option value=\"creative\">Creative User</option>\n                <option value=\"adventurous\">Adventurous User</option>\n                <option value=\"serious\">Skeptical User</option>\n                <option value=\"humorous\">Humorous User</option>\n                <option value=\"risk-taker\">Risk-Taker User</option>\n              </select>\n            </div>\n\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Behavioral Profile:</label>\n              <select\n                value={behaviorFlag}\n                onChange={(e) => setBehaviorFlag(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n              >\n                <option value=\"Friendly Behavior\">Select a Behavioral Profile</option>\n                <option value=\"Friendly\">Friendly</option>\n                <option value=\"Impatient\">Impatient</option>\n                <option value=\"Task-Oriented\">Task-Oriented</option>\n              </select>\n            </div>\n            \n          </div>\n          <div className=\"mb-4 flex flex-wrap\">\n\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Select Tone:</label>\n              <select\n                value={sentimentFlag}\n                onChange={(e) => setSentimentFlag(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n              >\n                <option value=\"Positive\">Select a Tone</option>\n                <option value=\"positive\">Positive</option>\n                <option value=\"aggressive\">Aggressive</option>\n                <option value=\"negative\">Negative</option>\n              </select>\n            </div>\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Demographic Profile:</label>\n              <select\n                value={demoFlag}\n                onChange={(e) => setDemoFlag(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n              >\n                <option value=\"Adults (age 25-34)\">Select a Demographic Profile</option>\n                <option value=\"teenager (age 13-17)\">Teenagers (13-17)</option>\n                <option value=\"young adults (age 18-24)\">Young Adults (18-24)</option>\n                <option value=\"adults (age 25-34)\">Adults (25-34)</option>\n                <option value=\"middle-aged (age 35-54)\">Middle-Aged (35-54)</option>\n                <option value=\"seniors (age 55+)\">Seniors (55+)</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"mb-4 flex flex-wrap\">\n\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Resident Type:</label>\n              <select\n                value={residentType}\n                onChange={(e) => setResidentType(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n              >\n                <option value=\"Urban Residents\">Select Resident Type:</option>\n                <option value=\"Anywhere\">None</option>\n                <option value=\"Urban\">Urban Residents</option>\n                <option value=\"Suburban\">Suburban Residents</option>\n                <option value=\"Rural\">Rural Residents</option>\n              </select>\n            </div>\n            <div className=\"w-1/2 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Family Status:</label>\n              <select\n                value={familyStatus}\n                onChange={(e) => setFamilyStatus(e.target.value)}\n                className=\"w-full bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-base\"\n              >\n                <option value=\"Single Status\">Select Family Status:</option>\n                <option value=\"Single\">Single</option>\n                <option value=\"Married\">Married</option>\n                <option value=\"Parents\">Parents</option>\n              </select>\n            </div>\n          </div> */}\n\n          <div className=\"mb-4 flex flex-wrap\">\n\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">Chat User Persona:</label>\n            <textarea\n              value={persona}\n              onChange={(e) => setPersona(e.target.value)}\n              className=\"w-full border rounded p-2\"\n              placeholder={placeholder}\n              rows={4}\n              required\n            ></textarea>\n          </div>\n\n\n          <div className=\"mb-4 flex flex-wrap\">\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Tags:</label>\n              <input\n                type=\"text\"\n                value={tags}\n                onChange={(e) => setTags(e.target.value)}\n                className=\"w-full border rounded p-2\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mb-4 flex flex-wrap\">\n            <div className=\"w-1/3 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Sample Size (%):</label>\n              <input\n                type=\"number\"\n                value={sampleSize}\n                onChange={(e) => {\n                  const newValue = Number(e.target.value);\n                  if (newValue >= 1 && newValue <= 100) {\n                    setSampleSize(newValue);\n                  } else {\n                  }\n                }}\n                className=\"w-full border rounded p-2\"\n                min={0}\n                max={100}\n                required\n              />\n            </div>\n\n            <div className=\"w-1/3 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Number of Questions:</label>\n              <input\n                type=\"number\"\n                value={numberOfQuestions}\n                onChange={(e) => {\n                  const newValue = Number(e.target.value);\n                  if (newValue >= 1 && newValue <= 100000) {\n                    setNumberOfQuestions(newValue);\n                  } else {\n                  }\n                }}\n                className=\"w-full border rounded p-2\"\n                min={1}\n                max={100000}\n                required\n              />\n\n            </div>\n\n            <div className=\"w-1/3 pr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\">Split Chunk Size:</label>\n              <input\n                type=\"number\"\n                value={chunkSize}\n                onChange={(e) => {\n                  const newValue = Number(e.target.value);\n                  if (newValue >= 1 && newValue <= 8000) {\n                    setChunkSize(newValue);\n                  } else {\n                  }\n                }}\n                className=\"w-full border rounded p-2\"\n                min={1}\n                max={8000}\n                required\n              />\n\n            </div>\n          </div>\n\n          \n        </form>\n\n        {successMessage && (\n          <p className=\"text-blue-500 text-sm mt-2\">\n            {successMessage}\n            <Link href={`/view/datasets/${generatedDatasetId}`} >\n              <span className='font-bold'> here</span>\n            </Link>\n          </p>\n        )}\n\n        \n        {formSubmitted && errorMsg && (\n          <p className=\"text-red-500 text-sm mt-2\">{errorMsg}</p>\n        )}\n        \n        <Button\n          className=\"mt-2 fixed text-white text-sm bottom-4 transform bg-gray-900 text-white hover:bg-gray-700 border-white hover:border-white py-2 px-4 rounded\"\n          style={{ zIndex: 1000 }} // Optional: Use zIndex to ensure the button is on top\n          disabled={isLoading}\n          onClick={handleSubmit}\n          type=\"button\"\n        >\n          {isLoading ? 'Submitting...' : 'Submit'}\n        </Button> \n        {generatedDatasetId && (\n          <div className=\"bg-white-100 rounded-md px-8 pt-6 pb-8 mb-4\"\n          style={{\n            maxHeight: '80vh',\n            overflowY: 'auto',\n            display: 'flex', // Enable flexbox\n            flexDirection: 'column', // Stack children vertically\n            justifyContent: 'space-between' // Center vertically\n          }}>\n            <Details datagen_id={generatedDatasetId} size='8xl'/> \n          </div>\n        )}\n      </div>\n      \n    </div>\n    </main>\n  );\n}\n","/Users/jyotirmoysundi/git/openeval-ui/components/endpoint-form.tsx",[],[],"/Users/jyotirmoysundi/git/openeval-ui/components/simulator-form.tsx",[],[],{"ruleId":"261","severity":1,"message":"262","line":11,"column":1,"nodeType":"263","endLine":68,"endColumn":2},{"ruleId":"264","severity":1,"message":"265","line":38,"column":6,"nodeType":"266","endLine":38,"endColumn":15,"suggestions":"267"},{"ruleId":"264","severity":1,"message":"268","line":57,"column":8,"nodeType":"266","endLine":57,"endColumn":25,"suggestions":"269"},{"ruleId":"264","severity":1,"message":"270","line":46,"column":8,"nodeType":"266","endLine":46,"endColumn":17,"suggestions":"271"},{"ruleId":"264","severity":1,"message":"272","line":158,"column":8,"nodeType":"266","endLine":158,"endColumn":49,"suggestions":"273"},{"ruleId":"264","severity":1,"message":"274","line":99,"column":8,"nodeType":"266","endLine":99,"endColumn":20,"suggestions":"275"},{"ruleId":"264","severity":1,"message":"276","line":94,"column":6,"nodeType":"266","endLine":94,"endColumn":18,"suggestions":"277"},{"ruleId":"264","severity":1,"message":"274","line":92,"column":6,"nodeType":"266","endLine":92,"endColumn":18,"suggestions":"278"},{"ruleId":"264","severity":1,"message":"274","line":98,"column":6,"nodeType":"266","endLine":98,"endColumn":18,"suggestions":"279"},{"ruleId":"264","severity":1,"message":"280","line":79,"column":6,"nodeType":"266","endLine":79,"endColumn":15,"suggestions":"281"},"@next/next/no-async-client-component","Prevent client components from being async functions. See: https://nextjs.org/docs/messages/no-async-client-component","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["282"],"React Hook useEffect has missing dependencies: 'fetchChatData' and 'fetchDatasetDetails'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has a missing dependency: 'fetchDatasetDetails'. Either include it or remove the dependency array.",["284"],"React Hook useEffect has missing dependencies: 'fetchChatData' and 'fetchEvaluationDetails'. Either include them or remove the dependency array.",["285"],"React Hook useEffect has missing dependencies: 'session' and 'userId'. Either include them or remove the dependency array.",["286"],"React Hook useEffect has a missing dependency: 'session'. Either include it or remove the dependency array.",["287"],["288"],["289"],"React Hook useEffect has a missing dependency: 'personaSentences'. Either include it or remove the dependency array.",["290"],{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"299","fix":"303"},{"desc":"299","fix":"304"},{"desc":"305","fix":"306"},"Update the dependencies array to be: [session, userId]",{"range":"307","text":"308"},"Update the dependencies array to be: [fetchChatData, fetchDatasetDetails, session, status]",{"range":"309","text":"310"},"Update the dependencies array to be: [fetchDatasetDetails, session]",{"range":"311","text":"312"},"Update the dependencies array to be: [session, simulation_run_id, scoreFilter, fetchEvaluationDetails, fetchChatData]",{"range":"313","text":"314"},"Update the dependencies array to be: [searchTerm, session, userId]",{"range":"315","text":"316"},"Update the dependencies array to be: [searchTerm, session]",{"range":"317","text":"318"},{"range":"319","text":"316"},{"range":"320","text":"316"},"Update the dependencies array to be: [personaSentences, session]",{"range":"321","text":"322"},[1281,1290],"[session, userId]",[2140,2157],"[fetchChatData, fetchDatasetDetails, session, status]",[1888,1897],"[fetchDatasetDetails, session]",[6233,6274],"[session, simulation_run_id, scoreFilter, fetchEvaluationDetails, fetchChatData]",[4219,4231],"[searchTerm, session, userId]",[3478,3490],"[searchTerm, session]",[3436,3448],[3556,3568],[4351,4360],"[personaSentences, session]"]